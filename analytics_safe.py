import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.colors as mcolors
import numpy as np
from scipy.stats import sem, pearsonr
from sklearn.linear_model import LinearRegression
import os
import requests
from datetime import datetime, timedelta
import seaborn as sns
import tempfile
import logging
import time
import psutil
import gc
import sqlite3

from config import DATA_DIR

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
logger = logging.getLogger(__name__)

# –ö–û–ù–°–¢–ê–ù–¢–´ –î–õ–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò
MAX_DATA_POINTS = 10000  # –ú–∞–∫—Å–∏–º—É–º —Ç–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
MAX_HEATMAP_DAYS = 90    # –ú–∞–∫—Å–∏–º—É–º –¥–Ω–µ–π –¥–ª—è —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã
SAMPLE_SIZE = 5000       # –†–∞–∑–º–µ—Ä –≤—ã–±–æ—Ä–∫–∏ –ø—Ä–∏ –±–æ–ª—å—à–æ–º –æ–±—ä–µ–º–µ –¥–∞–Ω–Ω—ã—Ö

# –ü–û–†–û–ì–ò –î–õ–Ø –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò
MAX_EXECUTION_TIME = 30  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
MAX_MEMORY_USAGE = 500   # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –≤ –ú–ë

def monitor_performance(func_name):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–π."""
    def decorator(func):
        def wrapper(*args, **kwargs):
            start_time = time.time()
            process = psutil.Process()
            memory_before = process.memory_info().rss / 1024 / 1024  # –ú–ë
            
            try:
                result = func(*args, **kwargs)
                return result
            finally:
                execution_time = time.time() - start_time
                memory_after = process.memory_info().rss / 1024 / 1024  # –ú–ë
                memory_peak = memory_after - memory_before
                
                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                logger.info(f"üîç {func_name}: –≤—Ä–µ–º—è={execution_time:.2f}—Å, –ø–∞–º—è—Ç—å={memory_peak:.1f}–ú–ë")
                
                # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ø–æ—Ä–æ–≥–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
                if execution_time > MAX_EXECUTION_TIME:
                    logger.warning(f"‚ö†Ô∏è {func_name}: –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è! {execution_time:.2f}—Å > {MAX_EXECUTION_TIME}—Å")
                
                if memory_peak > MAX_MEMORY_USAGE:
                    logger.warning(f"‚ö†Ô∏è {func_name}: –ü—Ä–µ–≤—ã—à–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏! {memory_peak:.1f}–ú–ë > {MAX_MEMORY_USAGE}–ú–ë")
                
                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ –¥–ª—è —Ç—è–∂–µ–ª—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
                if memory_peak > 200:
                    gc.collect()
                    logger.info("üßπ –í—ã–ø–æ–ª–Ω–µ–Ω–∞ –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏")
        
        return wrapper
    return decorator

def optimize_dataframe(df, max_points=MAX_DATA_POINTS):
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç DataFrame –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏."""
    if len(df) <= max_points:
        return df
    
    # –°—Ç—Ä–∞—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤—ã–±–æ—Ä–∫–∞ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    df_sorted = df.sort_values('timestamp')
    step = len(df) // max_points
    optimized_df = df_sorted.iloc[::step].copy()
    
    logger.info(f"üìä –î–∞–Ω–Ω—ã–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã: {len(df)} -> {len(optimized_df)} –∑–∞–ø–∏—Å–µ–π")
    return optimized_df

def send_photo_via_api(token, chat_id, file_path, caption=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ Telegram Bot API."""
    url = f"https://api.telegram.org/bot{token}/sendPhoto"
    with open(file_path, "rb") as photo:
        data = {"chat_id": chat_id}
        if caption:
            data["caption"] = caption  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏, –µ—Å–ª–∏ –æ–Ω–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞
        response = requests.post(url, data=data, files={"photo": photo})
    return response.json()


def cleanup_temp_files(*file_paths):
    """–£–¥–∞–ª—è–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –≥—Ä–∞—Ñ–∏–∫–æ–≤."""
    for file_path in file_paths:
        try:
            if os.path.exists(file_path):
                os.remove(file_path)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª {file_path}: {e}")




@monitor_performance("generate_and_send_charts")
def generate_and_send_charts(token, chat_id, df, state_type, logger, df_activities=None):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–æ–π."""
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ —Ñ–∞–π–ª—ã
    titles = {
        "emotion": {
            "daily": "–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ",
            "trend": "–¢—Ä–µ–Ω–¥ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è",
            "freq": "–ß–∞—Å—Ç–æ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è",
        },
        "physical": {
            "daily": "–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ",
            "trend": "–¢—Ä–µ–Ω–¥ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è",
            "freq": "–ß–∞—Å—Ç–æ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è",
        },
    }

    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ—á–∏—Å—Ç–∫–∏
    temp_files = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
    data_count = len(df)
    logger.info(f"üéØ Generating charts for {data_count} data points")

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
    try:
        if data_count >= 3:
            # –ü–æ–ª–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–ª—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö
            # –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            stats = calculate_stats(df)
            daily_states_path = save_plot_as_image(plot_daily_states, f"{state_type}_daily_states.png", stats, titles[state_type]["daily"], "–°—Ä–µ–¥–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ")
            temp_files.append(daily_states_path)

            # –¢—Ä–µ–Ω–¥ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            trend_path = save_plot_as_image(plot_trend, f"{state_type}_trend.png", df, titles[state_type]["trend"], "–°—Ä–µ–¥–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ")
            temp_files.append(trend_path)

            # –ß–∞—Å—Ç–æ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –º–Ω–æ–≥–æ)
            if data_count >= 5:
                freq_analysis_path = save_plot_as_image(plot_frequency_analysis, f"{state_type}_freq_analysis.png", df, titles[state_type]["freq"], "–ê–º–ø–ª–∏—Ç—É–¥–∞")
                temp_files.append(freq_analysis_path)

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤ —á–µ—Ä–µ–∑ API
            charts_to_send = [
                (daily_states_path, titles[state_type]["daily"]),
                (trend_path, titles[state_type]["trend"]),
            ]
            if data_count >= 5 and len(temp_files) >= 3:
                charts_to_send.append((temp_files[2], titles[state_type]["freq"]))

        else:
            # –£–ø—Ä–æ—â—ë–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–ª—è –º–∞–ª—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            daily_states_path = save_plot_as_image(plot_simple_summary, f"{state_type}_daily_states.png", df, titles[state_type]["daily"], "–ó–Ω–∞—á–µ–Ω–∏—è")
            temp_files.append(daily_states_path)
            charts_to_send = [(daily_states_path, f"{titles[state_type]['daily']} (–±–∞–∑–æ–≤—ã–π –≤–∏–¥)")]

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤
        for file_path, caption in charts_to_send:
            response = send_photo_via_api(token, chat_id, file_path, caption=caption)
            if response.get("ok"):
                logger.info(f"üìä –ì—Ä–∞—Ñ–∏–∫ {file_path} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ {file_path}: {response}")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ ({state_type}): {e}")
    finally:
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
        cleanup_temp_files(*temp_files)
        logger.info(f"üßπ –£–¥–∞–ª–µ–Ω–æ {len(temp_files)} –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –≥—Ä–∞—Ñ–∏–∫–æ–≤")

@monitor_performance("calculate_stats")
def calculate_stats(df, group_col='hour', confidence=0.8):
    stats = df.groupby(['day_type', group_col])['score'].agg(['mean', 'std']).reset_index()
    counts = df.groupby(['day_type', group_col])['score'].size().reset_index(name='count')
    stats = pd.merge(stats, counts, on=['day_type', group_col])

    # –î–ª—è –æ–¥–∏–Ω–æ—á–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –∑–∞–ø–æ–ª–Ω—è–µ–º std –Ω—É–ª—ë–º
    stats['std'] = stats['std'].fillna(0)

    def safe_confidence_interval(mean, std, count):
        if count > 1 and std > 0:
            margin = 1.28 * (std / (count ** 0.5))  # z-score for 80% CI
            return mean - margin, mean + margin
        else:
            # –î–ª—è –æ–¥–∏–Ω–æ—á–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏–ª–∏ –Ω—É–ª–µ–≤–æ–≥–æ std - —É–∑–∫–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
            margin = 0.1  # –ù–µ–±–æ–ª—å—à–∞—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
            return mean - margin, mean + margin

    stats[['ci_lower', 'ci_upper']] = stats.apply(
        lambda row: pd.Series(safe_confidence_interval(row['mean'], row['std'], row['count'])), axis=1
    )
    return stats

@monitor_performance("plot_trend")
def plot_trend(df, title, ylabel):
    """–°–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Å–∏–≤—ã–π –≥—Ä–∞—Ñ–∏–∫ —Ç—Ä–µ–Ω–¥–∞ —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º."""
    plt.style.use('default')
    
    daily_stats = df.groupby(df['timestamp'].dt.date)['score'].agg(['mean', sem]).reset_index()
    daily_stats.rename(columns={'mean': 'daily_mean', 'sem': 'daily_sem'}, inplace=True)
    daily_stats['ci_lower'] = daily_stats['daily_mean'] - 1.28 * daily_stats['daily_sem']
    daily_stats['ci_upper'] = daily_stats['daily_mean'] + 1.28 * daily_stats['daily_sem']

    daily_stats['timestamp'] = pd.to_datetime(daily_stats['timestamp'])
    daily_stats['date'] = pd.to_datetime(daily_stats['timestamp'].dt.date)
    daily_stats['date_index'] = (daily_stats['date'] - daily_stats['date'].min()).dt.days

    X = daily_stats['date_index'].values.reshape(-1, 1)
    regressor = LinearRegression()
    regressor.fit(X, daily_stats['daily_mean'])
    daily_stats['trend'] = regressor.predict(X)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞
    trend_slope = regressor.coef_[0]
    if trend_slope > 0.05:
        trend_color = '#27AE60'  # –ó–µ–ª–µ–Ω—ã–π –¥–ª—è —Ä–æ—Å—Ç–∞
        trend_text = '–ü–æ–∑–∏—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–Ω–¥'
    elif trend_slope < -0.05:
        trend_color = '#E74C3C'  # –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è
        trend_text = '–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–Ω–¥'
    else:
        trend_color = '#F39C12'  # –û—Ä–∞–Ω–∂–µ–≤—ã–π –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        trend_text = '–°—Ç–∞–±–∏–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥'

    # –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –£–º–µ–Ω—å—à–∏–ª–∏ —Ä–∞–∑–º–µ—Ä —Å 16x10 –¥–æ 12x8 –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏
    plt.figure(figsize=(12, 8))
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –ª–∏–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    plt.plot(daily_stats['date'].values, daily_stats['daily_mean'].values, 
            marker='o', color='#3498DB', linewidth=3, markersize=6,  # –£–º–µ–Ω—å—à–∏–ª–∏ —Ä–∞–∑–º–µ—Ä –º–∞—Ä–∫–µ—Ä–∞
            label='–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ', alpha=0.9, markeredgecolor='white', markeredgewidth=2)
    
    # –î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º
    plt.fill_between(
        daily_stats['date'], daily_stats['ci_lower'], daily_stats['ci_upper'], 
        color='#3498DB', alpha=0.2, label='–î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª'
    )
    
    # –õ–∏–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞
    plt.plot(daily_stats['date'].values, daily_stats['trend'].values, 
            color=trend_color, linestyle='--', linewidth=3, 
            label=f'{trend_text}', alpha=0.8)
    
    # –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è
    plt.title(f'{title}', fontsize=16, fontweight='bold', pad=20)  # –£–º–µ–Ω—å—à–∏–ª–∏ —à—Ä–∏—Ñ—Ç
    plt.xlabel('–î–∞—Ç–∞', fontsize=12, fontweight='bold')
    plt.ylabel(ylabel, fontsize=12, fontweight='bold')
    plt.grid(True, alpha=0.3, linestyle='--')
    plt.legend(fontsize=11, loc='best', framealpha=0.9)  # –£–º–µ–Ω—å—à–∏–ª–∏ —à—Ä–∏—Ñ—Ç
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –¥–ª—è —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    max_idx = daily_stats['daily_mean'].idxmax()
    min_idx = daily_stats['daily_mean'].idxmin()
    
    plt.annotate(f'–ú–∞–∫—Å–∏–º—É–º: {daily_stats.loc[max_idx, "daily_mean"]:.1f}',
                xy=(daily_stats.loc[max_idx, 'date'], daily_stats.loc[max_idx, 'daily_mean']),
                xytext=(10, 10), textcoords='offset points',
                bbox=dict(boxstyle="round,pad=0.3", facecolor='lightgreen', alpha=0.8),
                arrowprops=dict(arrowstyle='->', color='green'))
    
    plt.annotate(f'–ú–∏–Ω–∏–º—É–º: {daily_stats.loc[min_idx, "daily_mean"]:.1f}',
                xy=(daily_stats.loc[min_idx, 'date'], daily_stats.loc[min_idx, 'daily_mean']),
                xytext=(10, -20), textcoords='offset points',
                bbox=dict(boxstyle="round,pad=0.3", facecolor='lightcoral', alpha=0.8),
                arrowprops=dict(arrowstyle='->', color='red'))
    
    # –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∏ –¥–∞—Ç –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    plt.xticks(rotation=45)
    plt.tick_params(axis='both', labelsize=11)  # –£–º–µ–Ω—å—à–∏–ª–∏ —Ä–∞–∑–º–µ—Ä
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—É—é –ø–æ–¥–ø–∏—Å—å
    plt.figtext(0.5, 0.02, 
               f'–ê–Ω–∞–ª–∏–∑ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç {trend_text.lower()} –∑–∞ –ø–µ—Ä–∏–æ–¥. '
               f'–ù–∞–∫–ª–æ–Ω —Ç—Ä–µ–Ω–¥–∞: {trend_slope:.3f} –µ–¥–∏–Ω–∏—Ü –≤ –¥–µ–Ω—å.',
               ha='center', fontsize=10, style='italic',  # –£–º–µ–Ω—å—à–∏–ª–∏ —à—Ä–∏—Ñ—Ç
               bbox=dict(boxstyle="round,pad=0.5", facecolor='lightblue', alpha=0.3))
    
    plt.tight_layout()
    plt.subplots_adjust(bottom=0.15, top=0.92)
    
    # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏
    gc.collect()

@monitor_performance("analyze_activity_correlation")
def analyze_activity_correlation(df_emotion, df_physical, df_activities):
    """
    –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô –∞–Ω–∞–ª–∏–∑ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –º–µ–∂–¥—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è–º–∏ –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º/—Ñ–∏–∑–∏—á–µ—Å–∫–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º.
    """
    correlations = {
        'emotion': {},
        'physical': {},
        'activity_stats': {},
        'insights': []
    }
    
    try:
        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏
        df_emotion = optimize_dataframe(df_emotion, SAMPLE_SIZE)
        df_physical = optimize_dataframe(df_physical, SAMPLE_SIZE)
        df_activities = optimize_dataframe(df_activities, SAMPLE_SIZE)
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 1 —á–∞—Å–∞)
        merged_emotion = merge_activities_with_states(df_activities, df_emotion, 'emotion')
        merged_physical = merge_activities_with_states(df_activities, df_physical, 'physical')
        
        if len(merged_emotion) < 5:  # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            return correlations
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –¥–ª—è —ç–º–æ—Ü–∏–π
        activity_emotion_stats = merged_emotion.groupby('activity')['score'].agg(['mean', 'std', 'count']).reset_index()
        activity_emotion_stats = activity_emotion_stats[activity_emotion_stats['count'] >= 2]  # –ú–∏–Ω–∏–º—É–º 2 –∑–∞–ø–∏—Å–∏
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –¥–ª—è —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        activity_physical_stats = merged_physical.groupby('activity')['score'].agg(['mean', 'std', 'count']).reset_index()
        activity_physical_stats = activity_physical_stats[activity_physical_stats['count'] >= 2]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ)
        correlations['emotion'] = [
            {'activity': row['activity'], 'mean': row['mean'], 'std': row['std'], 'count': row['count']}
            for _, row in activity_emotion_stats.iterrows()
        ] if len(activity_emotion_stats) > 0 else []
        correlations['physical'] = [
            {'activity': row['activity'], 'mean': row['mean'], 'std': row['std'], 'count': row['count']}
            for _, row in activity_physical_stats.iterrows()
        ] if len(activity_physical_stats) > 0 else []
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–Ω—Å–∞–π—Ç—ã
        correlations['insights'] = generate_activity_insights(activity_emotion_stats, activity_physical_stats)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π: {e}")
        correlations['insights'] = ["‚ùó –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π"]
    
    return correlations

@monitor_performance("generate_and_send_correlation_analysis")
def generate_and_send_correlation_analysis(token, chat_id, df_emotion, df_physical, df_activities, logger):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π.
    """
    correlation_path = None
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –¥–∞–Ω–Ω—ã—Ö
        if len(df_activities) < 5 or len(df_emotion) < 5:
            logger.info("‚ÑπÔ∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
            return
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
        correlations = analyze_activity_correlation(df_emotion, df_physical, df_activities)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π
        correlation_path = save_plot_as_image(plot_activity_correlation, "activity_correlation.png", correlations)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫
        response = send_photo_via_api(
            token, 
            chat_id, 
            correlation_path, 
            caption="üìä –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π"
        )
        
        if response.get("ok"):
            logger.info("üìä –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∏–Ω—Å–∞–π—Ç—ã
            insights_text = generate_correlation_insights_text(correlations)
            if insights_text:
                import requests
                url = f"https://api.telegram.org/bot{token}/sendMessage"
                data = {
                    "chat_id": chat_id,
                    "text": insights_text,
                    "parse_mode": "Markdown"
                }
                response = requests.post(url, data=data)
                if response.json().get("ok"):
                    logger.info("üìù –ò–Ω—Å–∞–π—Ç—ã –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–Ω—Å–∞–π—Ç–æ–≤: {response.json()}")
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {response}")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {e}")
    finally:
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        if correlation_path:
            cleanup_temp_files(correlation_path)
            logger.info("üßπ –£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")


def should_generate_correlation_analysis(df_emotion, df_physical, df_activities):
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —Å–ª–µ–¥—É–µ—Ç –ª–∏ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑.
    
    Returns:
        bool: True –µ—Å–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    """
    return (
        len(df_activities) >= 5 and 
        len(df_emotion) >= 5 and 
        len(df_physical) >= 3
    ) 

# ======================== –ù–û–í–´–ï –¢–ò–ü–´ –ì–†–ê–§–ò–ö–û–í ========================

@monitor_performance("plot_heatmap_mood")
def plot_heatmap_mood(df, title="–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è"):
    """–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø —Ç–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏ –∏ —á–∞—Å–∞–º."""
    plt.style.use('default')
    
    # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏
    df = optimize_dataframe(df, MAX_HEATMAP_DAYS * 24)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    
    if len(df) < 10:
        # –î–ª—è –º–∞–ª—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        fig, ax = plt.subplots(figsize=(12, 6))
        ax.text(0.5, 0.5, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö\n–¥–ª—è —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã\n\n(–º–∏–Ω–∏–º—É–º 10 –∑–∞–ø–∏—Å–µ–π)', 
               ha='center', va='center', fontsize=16,
               bbox=dict(boxstyle="round,pad=0.5", facecolor='lightgray', alpha=0.8))
        ax.set_title(title, fontsize=16, fontweight='bold')
        ax.axis('off')
        return
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ
    df_copy = df.copy()
    df_copy['day_of_week'] = df_copy['timestamp'].dt.day_name()
    df_copy['hour'] = df_copy['timestamp'].dt.hour
    
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π
    day_mapping = {
        'Monday': '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', 'Tuesday': '–í—Ç–æ—Ä–Ω–∏–∫', 'Wednesday': '–°—Ä–µ–¥–∞',
        'Thursday': '–ß–µ—Ç–≤–µ—Ä–≥', 'Friday': '–ü—è—Ç–Ω–∏—Ü–∞', 'Saturday': '–°—É–±–±–æ—Ç–∞', 'Sunday': '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
    }
    df_copy['day_of_week_ru'] = df_copy['day_of_week'].map(day_mapping)
    
    # –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ò—Å–ø–æ–ª—å–∑—É–µ–º seaborn –≤–º–µ—Å—Ç–æ imshow –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    try:
        # –°–æ–∑–¥–∞–µ–º pivot table –¥–ª—è heatmap
        heatmap_data = df_copy.pivot_table(
            values='score', 
            index='day_of_week_ru', 
            columns='hour', 
            aggfunc='mean',
            fill_value=np.nan
        )
        
        # –ü–µ—Ä–µ—É–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–µ–º –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏
        day_order = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']
        heatmap_data = heatmap_data.reindex(day_order)
        
        # –°–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ç–µ–ø–ª–æ–≤—É—é –∫–∞—Ä—Ç—É —Å seaborn
        fig, ax = plt.subplots(figsize=(16, 8))  # –£–º–µ–Ω—å—à–∏–ª–∏ –≤—ã—Å–æ—Ç—É –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        
        # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –∏—Å–ø–æ–ª—å–∑—É–µ–º seaborn –±–µ–∑ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π –¥–ª—è –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        mask = heatmap_data.isna()
        
        sns.heatmap(
            heatmap_data, 
            cmap='RdYlGn', 
            center=5.5,
            vmin=1, vmax=10,
            mask=mask,
            cbar_kws={'label': '–°—Ä–µ–¥–Ω–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ'},
            linewidths=0.5,
            linecolor='white',
            annot=False,  # –û—Ç–∫–ª—é—á–∞–µ–º –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            fmt='.1f',
            ax=ax
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–Ω–∞—á–∏–º—ã—Ö —è—á–µ–µ–∫ (–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å)
        for i in range(len(heatmap_data.index)):
            for j in range(min(24, len(heatmap_data.columns))):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 24 —á–∞—Å–æ–≤
                if j < len(heatmap_data.columns):
                    try:
                        value = heatmap_data.iloc[i, j]
                        if not pd.isna(value) and value > 0:
                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–∞–∂–¥—É—é 4-—É—é —è—á–µ–π–∫—É –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                            if (i + j) % 4 == 0:
                                text_color = 'white' if value < 5.5 else 'black'
                                ax.text(j + 0.5, i + 0.5, f'{value:.1f}', 
                                       ha='center', va='center', 
                                       color=text_color, fontweight='bold', fontsize=8)
                    except (IndexError, KeyError):
                        continue
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–µ–π
        hours_to_show = list(range(0, 24, 2))  # –ö–∞–∂–¥—ã–µ 2 —á–∞—Å–∞
        ax.set_xticks([h + 0.5 for h in hours_to_show])
        ax.set_xticklabels([f'{h}:00' for h in hours_to_show], rotation=45, ha='right')
        
        ax.set_title(title, fontsize=16, fontweight='bold', pad=20)
        ax.set_xlabel('–ß–∞—Å –¥–Ω—è', fontsize=14, fontweight='bold')
        ax.set_ylabel('–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏', fontsize=14, fontweight='bold')
        
        plt.tight_layout()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã: {e}")
        # Fallback –∫ –ø—Ä–æ—Å—Ç–æ–º—É –≥—Ä–∞—Ñ–∏–∫—É
        fig, ax = plt.subplots(figsize=(12, 6))
        ax.text(0.5, 0.5, '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è\n—Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ', 
               ha='center', va='center', fontsize=16,
               bbox=dict(boxstyle="round,pad=0.5", facecolor='lightcoral', alpha=0.8))
        ax.set_title(title, fontsize=16, fontweight='bold')
        ax.axis('off')

@monitor_performance("plot_weekly_monthly_trends")
def plot_weekly_monthly_trends(df, title, period='week'):
    """–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô –≥—Ä–∞—Ñ–∏–∫ —Ç—Ä–µ–Ω–¥–æ–≤ –ø–æ –Ω–µ–¥–µ–ª—è–º –∏–ª–∏ –º–µ—Å—è—Ü–∞–º."""
    plt.style.use('default')
    
    # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    df = optimize_dataframe(df, SAMPLE_SIZE)
    
    if len(df) < 5:
        fig, ax = plt.subplots(figsize=(12, 6))
        ax.text(0.5, 0.5, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö\n–¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤', 
               ha='center', va='center', fontsize=16,
               bbox=dict(boxstyle="round,pad=0.5", facecolor='lightgray', alpha=0.8))
        ax.set_title(title, fontsize=16, fontweight='bold')
        ax.axis('off')
        return
    
    try:
        df_copy = df.copy()
        
        if period == 'week':
            df_copy['period'] = df_copy['timestamp'].dt.to_period('W')
            df_copy['period_str'] = df_copy['period'].astype(str)
            period_label = '–ù–µ–¥–µ–ª—è'
            x_rotation = 45
        else:  # month
            df_copy['period'] = df_copy['timestamp'].dt.to_period('M')
            df_copy['period_str'] = df_copy['period'].astype(str)
            period_label = '–ú–µ—Å—è—Ü'
            x_rotation = 0
        
        # –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—É—é –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É
        stats = df_copy.groupby('period_str')['score'].agg(['mean', 'std', 'count']).reset_index()
        stats['std'] = stats['std'].fillna(0)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–∏–æ–¥–æ–≤ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        if len(stats) > 50:
            stats = stats.tail(50)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 –ø–µ—Ä–∏–æ–¥–æ–≤
            logger.info(f"–û–≥—Ä–∞–Ω–∏—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–¥–æ–≤ –¥–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 50 –ø–µ—Ä–∏–æ–¥–æ–≤")
        
        fig, ax = plt.subplots(figsize=(14, 8))  # –£–º–µ–Ω—å—à–∏–ª–∏ —Ä–∞–∑–º–µ—Ä
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –ª–∏–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞
        ax.plot(range(len(stats)), stats['mean'], 
               color='#3498DB', linewidth=2, marker='o', markersize=6, 
               label='–°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è', alpha=0.9)
        
        # –î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏)
        ax.fill_between(range(len(stats)), 
                       stats['mean'] - stats['std'], 
                       stats['mean'] + stats['std'],
                       color='#3498DB', alpha=0.2, label='–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ')
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫–∏ (–º–µ–Ω—å—à–µ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏)
        scatter_size = np.minimum(stats['count']*20+30, 100)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä
        scatter = ax.scatter(range(len(stats)), stats['mean'], 
                            s=scatter_size, c=stats['mean'], 
                            cmap='RdYlGn', vmin=1, vmax=10, 
                            edgecolor='white', linewidth=1, alpha=0.8, zorder=5)
        
        # –ü–æ–¥–ø–∏—Å–∏ –¥–ª—è –≤—Å–µ—Ö —Ç–æ—á–µ–∫ –ø—Ä–∏ monthly –ø–µ—Ä–∏–æ–¥–µ, –∏–Ω–∞—á–µ –∫–∞–∂–¥–∞—è 3-—è
        for i, (mean_val, count) in enumerate(zip(stats['mean'], stats['count'])):
            if (period == 'month' or (i % 3 == 0 and count >= 3)):
                ax.annotate(f'{mean_val:.1f}', (i, mean_val), 
                           textcoords="offset points", xytext=(0,10), 
                           ha='center', fontsize=8, fontweight='bold',
                           bbox=dict(boxstyle="round,pad=0.2", facecolor='white', alpha=0.7))
        
        # –¶–≤–µ—Ç–æ–≤–∞—è —à–∫–∞–ª–∞
        cbar = plt.colorbar(scatter, ax=ax, fraction=0.046, pad=0.04)
        cbar.set_label('–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ', fontsize=10, fontweight='bold')
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–µ–π
        step = max(1, len(stats) // 10)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 10 –º–µ—Ç–æ–∫
        ax.set_xticks(range(0, len(stats), step))
        ax.set_xticklabels([stats['period_str'].iloc[i] for i in range(0, len(stats), step)], 
                          rotation=x_rotation, ha='right' if x_rotation > 0 else 'center')
        
        ax.set_ylabel('–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ', fontsize=12, fontweight='bold')
        ax.set_xlabel(period_label, fontsize=12, fontweight='bold')
        ax.set_title(title, fontsize=14, fontweight='bold', pad=15)
        
        ax.grid(True, alpha=0.3, linestyle='--')
        ax.legend(loc='upper right', fontsize=10)
        
        plt.tight_layout()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ —Ç—Ä–µ–Ω–¥–æ–≤: {e}")
        fig, ax = plt.subplots(figsize=(12, 6))
        ax.text(0.5, 0.5, '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è\n–≥—Ä–∞—Ñ–∏–∫–∞ —Ç—Ä–µ–Ω–¥–æ–≤', 
               ha='center', va='center', fontsize=16,
               bbox=dict(boxstyle="round,pad=0.5", facecolor='lightcoral', alpha=0.8))
        ax.set_title(title, fontsize=16, fontweight='bold')
        ax.axis('off')

@monitor_performance("plot_period_comparison_improved")
def plot_period_comparison_improved(df, title, comparison_type='last_weeks', state_type='emotion'):
    """–£–õ–£–ß–®–ï–ù–ù–´–ô –≥—Ä–∞—Ñ–∏–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–æ–≤ —Å –ø–æ–Ω—è—Ç–Ω–æ–π –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–µ–π –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ—Å—Ç–æ—è–Ω–∏–π."""
    plt.style.use('default')
    
    # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    df = optimize_dataframe(df, SAMPLE_SIZE)
    
    if len(df) < 10:
        fig, ax = plt.subplots(figsize=(12, 6))
        ax.text(0.5, 0.5, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö\n–¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–æ–≤', 
               ha='center', va='center', fontsize=16,
               bbox=dict(boxstyle="round,pad=0.5", facecolor='lightgray', alpha=0.8))
        ax.set_title(title, fontsize=16, fontweight='bold')
        ax.axis('off')
        return
    
    try:
        df_copy = df.copy()
        current_time = df_copy['timestamp'].max()
        
        if comparison_type == 'last_weeks':
            period_1_start = current_time - timedelta(weeks=2)
            period_1_end = current_time - timedelta(weeks=1)
            period_2_start = current_time - timedelta(weeks=1)
            period_2_end = current_time
            period_1_label = '–ü—Ä–æ—à–ª–∞—è –Ω–µ–¥–µ–ª—è'
            period_2_label = '–¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è'
        else:  # last_months
            period_1_start = current_time - timedelta(days=60)
            period_1_end = current_time - timedelta(days=30)
            period_2_start = current_time - timedelta(days=30)
            period_2_end = current_time
            period_1_label = '–ü—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü'
            period_2_label = '–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü'
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º
        period_1_data = df_copy[
            (df_copy['timestamp'] >= period_1_start) & 
            (df_copy['timestamp'] < period_1_end)
        ].copy()
        
        period_2_data = df_copy[
            (df_copy['timestamp'] >= period_2_start) & 
            (df_copy['timestamp'] < period_2_end)
        ].copy()
        
        if len(period_1_data) == 0 or len(period_2_data) == 0:
            fig, ax = plt.subplots(figsize=(12, 6))
            ax.text(0.5, 0.5, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö\n–¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–æ–≤', 
                   ha='center', va='center', fontsize=16,
                   bbox=dict(boxstyle="round,pad=0.5", facecolor='lightgray', alpha=0.8))
            ax.set_title(title, fontsize=16, fontweight='bold')
            ax.axis('off')
            return
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ 4-—á–∞—Å–æ–≤—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è
        period_1_data['hour_group'] = (period_1_data['timestamp'].dt.hour // 4) * 4
        period_2_data['hour_group'] = (period_2_data['timestamp'].dt.hour // 4) * 4
        
        period_1_stats = period_1_data.groupby('hour_group')['score'].agg(['mean', 'count']).reset_index()
        period_2_stats = period_2_data.groupby('hour_group')['score'].agg(['mean', 'count']).reset_index()
        
        # –ù–û–í–û–ï: –°–æ–∑–¥–∞—ë–º –æ–¥–∏–Ω –≥—Ä–∞—Ñ–∏–∫ —Å –Ω–∞–ª–æ–∂–µ–Ω–∏–µ–º –¥–ª—è –ª—É—á—à–µ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        fig, ax = plt.subplots(figsize=(16, 10))  # –£–≤–µ–ª–∏—á–∏–ª–∏ —Ä–∞–∑–º–µ—Ä –¥–ª—è lift
        
        # –ì—Ä–∞—Ñ–∏–∫ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
        ax.plot(period_1_stats['hour_group'], period_1_stats['mean'], 
                color='#E74C3C', linewidth=3, marker='o', markersize=8, 
                label=period_1_label, alpha=0.9)
        
        # –ì—Ä–∞—Ñ–∏–∫ –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
        ax.plot(period_2_stats['hour_group'], period_2_stats['mean'], 
                color='#3498DB', linewidth=3, marker='s', markersize=8, 
                label=period_2_label, alpha=0.9)
        
        # –ù–û–í–û–ï: –í—ã—á–∏—Å–ª—è–µ–º –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º lift –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Å–∞
        # –ù–∞—Ö–æ–¥–∏–º –æ–±—â–∏–µ —á–∞—Å—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        common_hours = set(period_1_stats['hour_group']).intersection(set(period_2_stats['hour_group']))
        lifts = []  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ —á–∞—Å–∞–º
        
        if common_hours:
            for hour in sorted(common_hours):
                p1_mean = period_1_stats[period_1_stats['hour_group'] == hour]['mean']
                p2_mean = period_2_stats[period_2_stats['hour_group'] == hour]['mean']
                
                if len(p1_mean) > 0 and len(p2_mean) > 0:
                    p1_val = p1_mean.iloc[0]
                    p2_val = p2_mean.iloc[0]
                    lift = p2_val - p1_val
                    lifts.append((hour, lift))
                    
                    # –¶–≤–µ—Ç–Ω–∞—è –æ–±–ª–∞—Å—Ç—å –ø–æ–∫–∞–∑—ã–≤–∞—é—â–∞—è —Ä–∞–∑–Ω–æ—Å—Ç—å
                    if p2_val > p1_val:
                        ax.fill_between([hour-0.2, hour+0.2], [p1_val, p1_val], [p2_val, p2_val], 
                                      color='green', alpha=0.3, label='–£–ª—É—á—à–µ–Ω–∏–µ' if hour == min(common_hours) else "")
                        # –ù–û–í–û–ï: –î–æ–±–∞–≤–ª—è–µ–º —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ lift
                        ax.text(hour, max(p1_val, p2_val) + 0.1, f'+{lift:.1f}', 
                               ha='center', va='bottom', fontweight='bold', fontsize=10,
                               color='green', bbox=dict(boxstyle="round,pad=0.2", facecolor='lightgreen', alpha=0.8))
                    elif p2_val < p1_val:
                        ax.fill_between([hour-0.2, hour+0.2], [p2_val, p2_val], [p1_val, p1_val], 
                                      color='red', alpha=0.3, label='–£—Ö—É–¥—à–µ–Ω–∏–µ' if hour == min(common_hours) else "")
                        # –ù–û–í–û–ï: –î–æ–±–∞–≤–ª—è–µ–º —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ lift
                        ax.text(hour, min(p1_val, p2_val) - 0.1, f'{lift:.1f}', 
                               ha='center', va='top', fontweight='bold', fontsize=10,
                               color='red', bbox=dict(boxstyle="round,pad=0.2", facecolor='lightcoral', alpha=0.8))
                    else:
                        # –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
                        ax.text(hour, p1_val, '0', 
                               ha='center', va='center', fontweight='bold', fontsize=9,
                               color='gray', bbox=dict(boxstyle="round,pad=0.1", facecolor='lightgray', alpha=0.6))
        
        # –°—Ä–µ–¥–Ω–∏–µ –ª–∏–Ω–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
        p1_avg = period_1_stats['mean'].mean()
        p2_avg = period_2_stats['mean'].mean()
        
        ax.axhline(y=p1_avg, color='#E74C3C', linestyle='--', alpha=0.7, 
                  label=f'–°—Ä–µ–¥–Ω–µ–µ {period_1_label}: {p1_avg:.1f}')
        ax.axhline(y=p2_avg, color='#3498DB', linestyle='--', alpha=0.7, 
                  label=f'–°—Ä–µ–¥–Ω–µ–µ {period_2_label}: {p2_avg:.1f}')
        
        # –£–õ–£–ß–®–ï–ù–ù–û–ï: –†–∞—Å—á–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        difference = p2_avg - p1_avg
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä–æ–≥–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if state_type == "physical":
            # –î–ª—è —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è (1-5) –ø–æ—Ä–æ–≥–∏ –º–µ–Ω—å—à–µ
            threshold = 0.15
            max_scale = 5
        else:
            # –î–ª—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è (1-10)
            threshold = 0.3
            max_scale = 10
        
        if abs(difference) > threshold:
            if difference > 0:
                interpretation = f"üìà –£–ª—É—á—à–µ–Ω–∏–µ –Ω–∞ {difference:.1f} –±–∞–ª–ª–∞"
                interp_color = 'green'
            else:
                interpretation = f"üìâ –°–Ω–∏–∂–µ–Ω–∏–µ –Ω–∞ {abs(difference):.1f} –±–∞–ª–ª–∞"
                interp_color = 'red'
        else:
            interpretation = "üìä –ü—Ä–∏–º–µ—Ä–Ω–æ –Ω–∞ —Ç–æ–º –∂–µ —É—Ä–æ–≤–Ω–µ"
            interp_color = 'gray'
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–ø–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        state_emoji = "üòä" if state_type == "emotion" else "üí™"
        state_name = "–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è" if state_type == "emotion" else "—Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"
        
        # –ù–û–í–û–ï: –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–π lift —Å –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º
        if p1_avg > 0:
            percent_change = (difference / p1_avg) * 100
            percent_text = f" ({percent_change:+.1f}%)"
        else:
            percent_text = ""
            
        ax.text(0.02, 0.98, f"{state_emoji} {state_name.title()}: {interpretation}{percent_text}", 
               transform=ax.transAxes, 
               fontsize=14, fontweight='bold', color=interp_color,
               bbox=dict(boxstyle="round,pad=0.4", facecolor='white', alpha=0.9),
               verticalalignment='top')
        
        # –ù–û–í–û–ï: –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–±—â–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if abs(difference) > threshold:
            # –†–∏—Å—É–µ–º —Å—Ç—Ä–µ–ª–∫—É –ø–æ–∫–∞–∑—ã–≤–∞—é—â—É—é –æ–±—â–µ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            arrow_y = (p1_avg + p2_avg) / 2
            if difference > 0:
                ax.annotate('', xy=(20.5, arrow_y + abs(difference)/2), xytext=(20.5, arrow_y - abs(difference)/2),
                           arrowprops=dict(arrowstyle='->', lw=3, color='green', alpha=0.7))
                ax.text(21, arrow_y, f'‚Üë{difference:.1f}', ha='left', va='center', 
                       fontsize=12, fontweight='bold', color='green')
            else:
                ax.annotate('', xy=(20.5, arrow_y - abs(difference)/2), xytext=(20.5, arrow_y + abs(difference)/2),
                           arrowprops=dict(arrowstyle='->', lw=3, color='red', alpha=0.7))
                ax.text(21, arrow_y, f'‚Üì{abs(difference):.1f}', ha='left', va='center', 
                       fontsize=12, fontweight='bold', color='red')
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞
        ax.set_ylabel('–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ', fontsize=12, fontweight='bold')
        ax.set_xlabel('–í—Ä–µ–º—è –¥–Ω—è (—á–∞—Å—ã)', fontsize=12, fontweight='bold')
        ax.grid(True, alpha=0.3, linestyle='--')
        ax.legend(loc='upper left', fontsize=10, framealpha=0.9)
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        all_values = list(period_1_stats['mean']) + list(period_2_stats['mean'])
        if all_values:
            y_min = min(all_values)
            y_max = max(all_values)
            y_range = y_max - y_min
            
            # –î–æ–±–∞–≤–ª—è–µ–º 15% –æ—Ç—Å—Ç—É–ø–∞ –¥–ª—è –ª—É—á—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏ (–±–æ–ª—å—à–µ –¥–ª—è lift –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π)
            padding = max(0.2, y_range * 0.15)
            ax.set_ylim(max(0.5, y_min - padding), min(max_scale + 0.5, y_max + padding))
        
        ax.set_title(f'{title}', fontsize=14, fontweight='bold', pad=15)
        
        # –£–ª—É—á—à–µ–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∏ –≤—Ä–µ–º–µ–Ω–∏
        hour_labels = {0: '0-3', 4: '4-7', 8: '8-11', 12: '12-15', 16: '16-19', 20: '20-23'}
        ax.set_xticks([0, 4, 8, 12, 16, 20])
        ax.set_xticklabels([hour_labels.get(h, str(h)) for h in [0, 4, 8, 12, 16, 20]])
        ax.set_xlim(-1, 22)  # –û—Å—Ç–∞–≤–ª—è–µ–º –º–µ—Å—Ç–æ –¥–ª—è —Å—Ç—Ä–µ–ª–∫–∏ —Å–ø—Ä–∞–≤–∞
        
        plt.tight_layout()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è ({state_type}): {e}")
        # –î–æ–±–∞–≤–ª—è–µ–º –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—à–∏–±–∫–µ
        import traceback
        logger.error(f"–ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞: {traceback.format_exc()}")
        
        fig, ax = plt.subplots(figsize=(12, 6))
        ax.text(0.5, 0.5, f'–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è\n–≥—Ä–∞—Ñ–∏–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è\n{state_type}\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏', 
               ha='center', va='center', fontsize=16,
               bbox=dict(boxstyle="round,pad=0.5", facecolor='lightcoral', alpha=0.8))
        ax.set_title(title, fontsize=16, fontweight='bold')
        ax.axis('off')

@monitor_performance("generate_and_send_new_charts")
def generate_and_send_new_charts(token, chat_id, df, chart_type, state_type, logger):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–µ —Ç–∏–ø—ã –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–æ–π."""
    file_path = None
    file_path2 = None  # –î–ª—è –≤—Ç–æ—Ä–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ –ø—Ä–∏ period_comparison
    
    try:
        timestamp = datetime.now().strftime("%Y%m%d%H%M%S")
        
        if chart_type == "heatmap":
            filename = f"{state_type}_heatmap_{timestamp}.png"
            # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —É–ø—Ä–æ—â—ë–Ω–Ω—É—é —Ç–µ–ø–ª–æ–≤—É—é –∫–∞—Ä—Ç—É —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º state_type
            if state_type == "physical":
                title = "–ö–∞—Ä—Ç–∞ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ –¥–Ω—è–º –∏ —á–∞—Å–∞–º"
                caption = f"üóìÔ∏è –£–ø—Ä–æ—â—ë–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–∑–µ–ª—ë–Ω—ã–π=—Ö–æ—Ä–æ—à–æ, –∫—Ä–∞—Å–Ω—ã–π=–ø–ª–æ—Ö–æ)"
            else:
                title = "–ö–∞—Ä—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –ø–æ –¥–Ω—è–º –∏ —á–∞—Å–∞–º"
                caption = f"üóìÔ∏è –£–ø—Ä–æ—â—ë–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è (–∑–µ–ª—ë–Ω—ã–π=—Ö–æ—Ä–æ—à–æ, –∫—Ä–∞—Å–Ω—ã–π=–ø–ª–æ—Ö–æ)"
            
            file_path = save_plot_as_image(plot_heatmap_simple, filename, df, title, state_type)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫
            response = send_photo_via_api(token, chat_id, file_path, caption=caption)
            
            if response.get("ok"):
                logger.info(f"üìä New chart {chart_type} sent successfully")
                return True
            else:
                logger.error(f"‚ùå Failed to send chart {chart_type}: {response}")
                return False
            
        elif chart_type == "weekly_trends":
            filename = f"{state_type}_weekly_trends_{timestamp}.png"
            file_path = save_plot_as_image(plot_weekly_monthly_trends, filename, df, f"–¢—Ä–µ–Ω–¥—ã –ø–æ –Ω–µ–¥–µ–ª—è–º - {state_type}", 'week')
            caption = f"üìà –¢—Ä–µ–Ω–¥—ã –ø–æ –Ω–µ–¥–µ–ª—è–º"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫
            response = send_photo_via_api(token, chat_id, file_path, caption=caption)
            
            if response.get("ok"):
                logger.info(f"üìä New chart {chart_type} sent successfully")
                return True
            else:
                logger.error(f"‚ùå Failed to send chart {chart_type}: {response}")
                return False
            
        elif chart_type == "monthly_trends":
            filename = f"{state_type}_monthly_trends_{timestamp}.png"
            file_path = save_plot_as_image(plot_weekly_monthly_trends, filename, df, f"–¢—Ä–µ–Ω–¥—ã –ø–æ –º–µ—Å—è—Ü–∞–º - {state_type}", 'month')
            caption = f"üìä –¢—Ä–µ–Ω–¥—ã –ø–æ –º–µ—Å—è—Ü–∞–º"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫
            response = send_photo_via_api(token, chat_id, file_path, caption=caption)
            
            if response.get("ok"):
                logger.info(f"üìä New chart {chart_type} sent successfully")
                return True
            else:
                logger.error(f"‚ùå Failed to send chart {chart_type}: {response}")
                return False
            
        elif chart_type == "period_comparison":
            # –ù–û–í–û–ï: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –î–í–ê –≥—Ä–∞—Ñ–∏–∫–∞ - –¥–ª—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∏ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            success_count = 0
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–æ–∏—Ö —Ç–∏–ø–æ–≤ —Å–æ—Å—Ç–æ—è–Ω–∏–π
            try:
                import sqlite3
                from config import DATA_DIR
                DB_PATH = os.path.join(DATA_DIR, "mood_tracker.db")
                
                # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ chat_id (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ chat_id = user_id)
                user_id = chat_id
                
                # –û–¢–õ–ê–î–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å user_id
                logger.info(f"üîç Processing period comparison for user_id: {user_id}, chat_id: {chat_id}")
                
                if user_id:
                    conn = sqlite3.connect(DB_PATH)
                    
                    # –û–¢–õ–ê–î–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    check_query = "SELECT COUNT(*) as total FROM logs WHERE user_id = ?"
                    total_count = pd.read_sql_query(check_query, conn, params=[user_id])
                    logger.info(f"üîç Total records for user {user_id}: {total_count['total'].iloc[0]}")
                    
                    # –û–¢–õ–ê–î–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å–∏ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                    physical_check_query = """
                        SELECT COUNT(*) as count, 
                               MIN(timestamp) as earliest, 
                               MAX(timestamp) as latest,
                               details
                        FROM logs 
                        WHERE event_type = 'answer_physical' AND user_id = ?
                        GROUP BY details
                        ORDER BY count DESC
                    """
                    physical_check = pd.read_sql_query(physical_check_query, conn, params=[user_id])
                    logger.info(f"üîç Physical state records breakdown: {physical_check.to_dict('records')}")
                    
                    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ user_id –¥–ª—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                    emotion_query = """
                        SELECT timestamp, event_type, details
                        FROM logs 
                        WHERE event_type IN ('answer_emotional') AND user_id = ?
                        ORDER BY timestamp DESC
                        LIMIT 1000
                    """
                    df_emotion = pd.read_sql_query(emotion_query, conn, params=[user_id])
                    
                    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ user_id –¥–ª—è —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö  
                    physical_query = """
                        SELECT timestamp, event_type, details
                        FROM logs 
                        WHERE event_type IN ('answer_physical') AND user_id = ?
                        ORDER BY timestamp DESC
                        LIMIT 1000
                    """
                    df_physical = pd.read_sql_query(physical_query, conn, params=[user_id])
                    conn.close()
                    
                    # –û–¢–õ–ê–î–ö–ê: –õ–æ–≥–∏—Ä—É–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
                    logger.info(f"üîç Raw emotion data: {len(df_emotion)} records")
                    logger.info(f"üîç Raw physical data: {len(df_physical)} records")
                    
                    if not df_physical.empty:
                        logger.info(f"üîç Physical details values: {df_physical['details'].unique()}")
                    
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                    if not df_emotion.empty:
                        df_emotion['timestamp'] = pd.to_datetime(df_emotion['timestamp'])
                        mood_map = {
                            "–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ–µ": 10, "–û—á–µ–Ω—å —Ö–æ—Ä–æ—à–µ–µ": 9, "–•–æ—Ä–æ—à–µ–µ": 8,
                            "–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ": 7, "–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ": 6, "–°—Ä–µ–¥–Ω–µ–µ": 5,
                            "–ü–ª–æ—Ö–æ–µ": 4, "–û—á–µ–Ω—å –ø–ª–æ—Ö–æ–µ": 3, "–£–∂–∞—Å–Ω–æ–µ": 2, "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –ø–ª–æ—Ö–æ–µ": 1
                        }
                        df_emotion['score'] = df_emotion['details'].replace(mood_map)
                        df_emotion = df_emotion.dropna(subset=['score'])
                        
                        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                        filename_emotion = f"emotion_period_comparison_{timestamp}.png"
                        file_path = save_plot_as_image(
                            plot_period_comparison_improved, 
                            filename_emotion, 
                            df_emotion, 
                            f"–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–æ–≤ - –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ", 
                            'last_weeks',
                            'emotion'
                        )
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫ —ç–º–æ—Ü–∏–π
                        response = send_photo_via_api(
                            token, chat_id, file_path, 
                            caption=f"üòä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è (—Å –∞–≤—Ç–æ–º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ–º)"
                        )
                        
                        if response.get("ok"):
                            logger.info(f"üìä Emotion period comparison sent successfully for user {user_id}")
                            success_count += 1
                        else:
                            logger.error(f"‚ùå Failed to send emotion period comparison: {response}")
                    else:
                        logger.info(f"‚ÑπÔ∏è No emotion data found for user {user_id}")
                    
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                    if not df_physical.empty:
                        df_physical['timestamp'] = pd.to_datetime(df_physical['timestamp'])
                        
                        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å –æ—Ç–ª–∞–¥–∫–æ–π
                        physical_map = {
                            "–û—Ç–ª–∏—á–Ω–æ": 5, "–•–æ—Ä–æ—à–æ": 4, "–ù–æ—Ä–º–∞–ª—å–Ω–æ": 3, "–ü–ª–æ—Ö–æ": 2, "–û—á–µ–Ω—å –ø–ª–æ—Ö–æ": 1,
                            # –î–æ–±–∞–≤–ª—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
                            "–û—Ç–ª–∏—á–Ω–æ–µ": 5, "–•–æ—Ä–æ—à–µ–µ": 4, 
                        }
                        
                        # –û–¢–õ–ê–î–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ –º–∞–ø—è—Ç—Å—è
                        unmapped_values = set(df_physical['details'].unique()) - set(physical_map.keys())
                        if unmapped_values:
                            logger.warning(f"‚ö†Ô∏è Unmapped physical values: {unmapped_values}")
                            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ—Ö–æ–∂–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏ –¥–æ–±–∞–≤–∏—Ç—å –∏—Ö –≤ –º–∞–ø–ø–∏–Ω–≥
                            for val in unmapped_values:
                                if val and isinstance(val, str):
                                    val_lower = val.lower()
                                    if "–æ—Ç–ª–∏—á–Ω–æ" in val_lower or "–æ—Ç–ª–∏—á–Ω" in val_lower:
                                        physical_map[val] = 5
                                    elif "—Ö–æ—Ä–æ—à–æ" in val_lower or "—Ö–æ—Ä–æ—à" in val_lower:
                                        physical_map[val] = 4
                                    elif "–Ω–æ—Ä–º–∞–ª—å–Ω–æ" in val_lower or "–Ω–æ—Ä–º" in val_lower:
                                        physical_map[val] = 3
                                    elif "–ø–ª–æ—Ö–æ" in val_lower and "–æ—á–µ–Ω—å" not in val_lower:
                                        physical_map[val] = 2
                                    elif "–æ—á–µ–Ω—å –ø–ª–æ—Ö–æ" in val_lower or "—É–∂–∞—Å–Ω–æ" in val_lower:
                                        physical_map[val] = 1
                                    logger.info(f"üîß Auto-mapped '{val}' to {physical_map.get(val, 'UNMAPPED')}")
                        
                        df_physical['score'] = df_physical['details'].replace(physical_map)
                        
                        # –û–¢–õ–ê–î–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
                        logger.info(f"üîç Physical data after mapping: {df_physical['score'].value_counts().to_dict()}")
                        logger.info(f"üîç NaN values after mapping: {df_physical['score'].isna().sum()}")
                        
                        df_physical = df_physical.dropna(subset=['score'])
                        
                        # –û–¢–õ–ê–î–ö–ê: –õ–æ–≥–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∞–Ω–Ω—ã—Ö
                        logger.info(f"üîç Final physical data for user {user_id}: {len(df_physical)} records")
                        if len(df_physical) > 0:
                            logger.info(f"üîç Score range: {df_physical['score'].min()}-{df_physical['score'].max()}")
                            logger.info(f"üîç Sample data: {df_physical[['timestamp', 'details', 'score']].head(3).to_dict()}")
                            
                            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                            filename_physical = f"physical_period_comparison_{timestamp}.png"
                            file_path2 = save_plot_as_image(
                                plot_period_comparison_improved, 
                                filename_physical, 
                                df_physical, 
                                f"–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–æ–≤ - –§–∏–∑–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ", 
                                'last_weeks',
                                'physical'
                            )
                            
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                            response2 = send_photo_via_api(
                                token, chat_id, file_path2, 
                                caption=f"üí™ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è (—Å –∞–≤—Ç–æ–º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ–º)"
                            )
                            
                            if response2.get("ok"):
                                logger.info(f"üìä Physical period comparison sent successfully for user {user_id}")
                                success_count += 1
                            else:
                                logger.error(f"‚ùå Failed to send physical period comparison: {response2}")
                        else:
                            logger.warning(f"‚ö†Ô∏è No valid physical data after processing for user {user_id}")
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –ø—Ä–æ–±–ª–µ–º–µ —Å –¥–∞–Ω–Ω—ã–º–∏
                            import requests
                            url = f"https://api.telegram.org/bot{token}/sendMessage"
                            data = {
                                "chat_id": chat_id,
                                "text": "üí™ –ü—Ä–æ–±–ª–µ–º–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è.\n\n–í–æ–∑–º–æ–∂–Ω–æ, —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–∏–ª—Å—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                            }
                            requests.post(url, data=data)
                    else:
                        logger.info(f"‚ÑπÔ∏è No physical data found for user {user_id}")
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö
                        import requests
                        url = f"https://api.telegram.org/bot{token}/sendMessage"
                        data = {
                            "chat_id": chat_id,
                            "text": "üí™ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –æ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–æ–≤.\n\n–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏!"
                        }
                        requests.post(url, data=data)
                
                return success_count > 0
                
            except Exception as e:
                logger.error(f"‚ùå Error loading data for period comparison: {e}")
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—É—é —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                import traceback
                logger.error(f"‚ùå Full traceback: {traceback.format_exc()}")
                return False
            
        else:
            logger.error(f"‚ùå Unknown chart type: {chart_type}")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå Error generating new chart {chart_type}: {e}")
        return False
    finally:
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        if file_path:
            cleanup_temp_files(file_path)
            logger.info(f"üßπ –£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≥—Ä–∞—Ñ–∏–∫–∞ {chart_type}")
        if file_path2:
            cleanup_temp_files(file_path2)
            logger.info(f"üßπ –£–¥–∞–ª–µ–Ω –≤—Ç–æ—Ä–æ–π –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≥—Ä–∞—Ñ–∏–∫–∞ {chart_type}")

def should_generate_new_charts(df, chart_type):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö —Ç–∏–ø–æ–≤ –≥—Ä–∞—Ñ–∏–∫–æ–≤."""
    data_count = len(df)
    
    min_requirements = {
        "heatmap": 10,        # –ú–∏–Ω–∏–º—É–º –¥–ª—è —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã (–Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π)
        "weekly_trends": 14,  # –ú–∏–Ω–∏–º—É–º –¥–ª—è –Ω–µ–¥–µ–ª—å–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤ (2 –Ω–µ–¥–µ–ª–∏)
        "monthly_trends": 30, # –ú–∏–Ω–∏–º—É–º –¥–ª—è –º–µ—Å—è—á–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤ (1 –º–µ—Å—è—Ü)
        "period_comparison": 20  # –ú–∏–Ω–∏–º—É–º –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–æ–≤
    }
    
    required = min_requirements.get(chart_type, 5)
    return data_count >= required


# ---------------------------------------------------------------------------------
# –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã - –∞–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
# ---------------------------------------------------------------------------------

def calculate_trend_direction(df, weeks=4):
    """–í—ã—á–∏—Å–ª—è–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –Ω–µ–¥–µ–ª—å."""
    try:
        from datetime import datetime, timedelta
        from sklearn.linear_model import LinearRegression
        
        # –ë–µ—Ä–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–µ–¥–µ–ª–∏
        cutoff_date = df['timestamp'].max() - timedelta(weeks=weeks)
        recent_df = df[df['timestamp'] >= cutoff_date].copy()
        
        if len(recent_df) < 5:
            return 0  # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö
        
        # –°–æ–∑–¥–∞–µ–º —á–∏—Å–ª–æ–≤—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Ä–µ–≥—Ä–µ—Å—Å–∏–∏
        recent_df['days_from_start'] = (recent_df['timestamp'] - recent_df['timestamp'].min()).dt.days
        
        X = recent_df['days_from_start'].values.reshape(-1, 1)
        y = recent_df['score'].values
        
        model = LinearRegression()
        model.fit(X, y)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –Ω–∞–∫–ª–æ–Ω–∞ (—Ç—Ä–µ–Ω–¥)
        return model.coef_[0] * 7  # –£–º–Ω–æ–∂–∞–µ–º –Ω–∞ 7 –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ —Ç—Ä–µ–Ω–¥–∞
        
    except Exception as e:
        logger.error(f"Error calculating trend: {e}")
        return 0


def analyze_mood_patterns(df):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –≤—ã–≤–æ–¥—ã."""
    insights = []
    
    if len(df) < 5:
        return ["üìä –ü–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ!"]
    
    try:
        # –ê–Ω–∞–ª–∏–∑ –ø–æ —á–∞—Å–∞–º –¥–Ω—è
        df['hour'] = df['timestamp'].dt.hour
        hourly_stats = df.groupby('hour')['score'].agg(['mean', 'count']).reset_index()
        hourly_stats = hourly_stats[hourly_stats['count'] >= 2]  # –¢–æ–ª—å–∫–æ —á–∞—Å—ã —Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        
        if len(hourly_stats) > 0:
            best_hour = hourly_stats.loc[hourly_stats['mean'].idxmax()]
            worst_hour = hourly_stats.loc[hourly_stats['mean'].idxmin()]
            
            insights.append(f"‚è∞ –í–∞—à –ª—É—á—à–∏–π —á–∞—Å: {int(best_hour['hour'])}:00 (—Å—Ä–µ–¥–Ω–µ–µ: {best_hour['mean']:.1f}/10)")
            insights.append(f"‚è∞ –°–ª–æ–∂–Ω–æ–µ –≤—Ä–µ–º—è: {int(worst_hour['hour'])}:00 (—Å—Ä–µ–¥–Ω–µ–µ: {worst_hour['mean']:.1f}/10)")
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
        df['day_name'] = df['timestamp'].dt.day_name()
        day_mapping = {
            'Monday': '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', 'Tuesday': '–í—Ç–æ—Ä–Ω–∏–∫', 'Wednesday': '–°—Ä–µ–¥–∞',
            'Thursday': '–ß–µ—Ç–≤–µ—Ä–≥', 'Friday': '–ü—è—Ç–Ω–∏—Ü–∞', 'Saturday': '–°—É–±–±–æ—Ç–∞', 'Sunday': '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
        }
        df['day_name_ru'] = df['day_name'].map(day_mapping)
        
        daily_stats = df.groupby('day_name_ru')['score'].agg(['mean', 'count']).reset_index()
        daily_stats = daily_stats[daily_stats['count'] >= 2]
        
        if len(daily_stats) > 0:
            best_day = daily_stats.loc[daily_stats['mean'].idxmax()]
            worst_day = daily_stats.loc[daily_stats['mean'].idxmin()]
            
            insights.append(f"üìÖ –õ—É—á—à–∏–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏: {best_day['day_name_ru']} ({best_day['mean']:.1f}/10)")
            insights.append(f"üìÖ –°–ª–æ–∂–Ω—ã–π –¥–µ–Ω—å: {worst_day['day_name_ru']} ({worst_day['mean']:.1f}/10)")
        
        # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞
        trend = calculate_trend_direction(df, weeks=4)
        if trend > 0.15:
            insights.append(f"üìà –û—Ç–ª–∏—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏! –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü –≤–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —É–ª—É—á—à–∏–ª–æ—Å—å –Ω–∞ {trend:.1f} –±–∞–ª–ª–∞ –≤ –Ω–µ–¥–µ–ª—é")
        elif trend < -0.15:
            insights.append(f"üìâ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü –Ω–∞–º–µ—Ç–∏–ª—Å—è —Å–ø–∞–¥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –Ω–∞ {abs(trend):.1f} –±–∞–ª–ª–∞ –≤ –Ω–µ–¥–µ–ª—é. –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ñ–∞–∫—Ç–æ—Ä—ã —Å—Ç—Ä–µ—Å—Å–∞")
        else:
            insights.append("üìä –í–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –æ—Å—Ç–∞–µ—Ç—Å—è —Å—Ç–∞–±–∏–ª—å–Ω—ã–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü")
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        mean_score = df['score'].mean()
        std_score = df['score'].std()
        
        if mean_score >= 7:
            insights.append(f"‚ú® –£ –≤–∞—Å –æ—Ç–ª–∏—á–Ω–æ–µ –æ–±—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ! –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {mean_score:.1f}/10")
        elif mean_score >= 5:
            insights.append(f"üòä –£ –≤–∞—Å —Ö–æ—Ä–æ—à–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –≤ —Ü–µ–ª–æ–º. –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {mean_score:.1f}/10")
        else:
            insights.append(f"ü§ó –ï—Å—Ç—å –Ω–∞–¥ —á–µ–º –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å. –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {mean_score:.1f}/10. –ü–æ–º–Ω–∏—Ç–µ: –∫–∞–∂–¥—ã–π –¥–µ–Ω—å - –Ω–æ–≤–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å!")
        
        if std_score < 1.5:
            insights.append("üéØ –í–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –¥–æ–≤–æ–ª—å–Ω–æ —Å—Ç–∞–±–∏–ª—å–Ω–æ - —ç—Ç–æ —Ö–æ—Ä–æ—à–∏–π –ø—Ä–∏–∑–Ω–∞–∫!")
        elif std_score > 2.5:
            insights.append("üé¢ –í–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–∏–ª—å–Ω–æ –∫–æ–ª–µ–±–ª–µ—Ç—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–π—Ç–∏ —Ñ–∞–∫—Ç–æ—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤–ª–∏—è—é—Ç –Ω–∞ —ç—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è")
        
    except Exception as e:
        logger.error(f"Error in mood pattern analysis: {e}")
        insights.append("‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤")
    
    return insights


def analyze_activity_impact(df_emotion, df_activities):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–ª–∏—è–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ."""
    try:
        if df_activities.empty or df_emotion.empty:
            return {}
        
        activity_impact = {}
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        unique_activities = df_activities['activity'].unique()
        
        for activity in unique_activities:
            if pd.isna(activity) or activity == '':
                continue
                
            # –ù–∞—Ö–æ–¥–∏–º –∑–∞–ø–∏—Å–∏ —ç–º–æ—Ü–∏–π –ø–æ—Å–ª–µ —ç—Ç–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 2 —á–∞—Å–æ–≤)
            activity_times = df_activities[df_activities['activity'] == activity]['timestamp']
            
            scores_after_activity = []
            scores_without_activity = []
            
            for emotion_time in df_emotion['timestamp']:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —á–∞—Å–∞
                recent_activities = activity_times[
                    (activity_times <= emotion_time) & 
                    (activity_times >= emotion_time - pd.Timedelta(hours=2))
                ]
                
                emotion_score = df_emotion[df_emotion['timestamp'] == emotion_time]['score'].iloc[0]
                
                if len(recent_activities) > 0:
                    scores_after_activity.append(emotion_score)
                else:
                    scores_without_activity.append(emotion_score)
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–æ—Å—Ç—å —Å—Ä–µ–¥–Ω–∏—Ö
            if len(scores_after_activity) >= 2 and len(scores_without_activity) >= 2:
                avg_with = np.mean(scores_after_activity)
                avg_without = np.mean(scores_without_activity)
                impact = avg_with - avg_without
                activity_impact[activity] = impact
        
        return activity_impact
        
    except Exception as e:
        logger.error(f"Error analyzing activity impact: {e}")
        return {}


def generate_smart_recommendations(df_emotion, df_physical, df_activities):
    """–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —É–º–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö."""
    recommendations = []
    
    try:
        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        df_emotion = optimize_dataframe(df_emotion, SAMPLE_SIZE)
        df_physical = optimize_dataframe(df_physical, SAMPLE_SIZE)
        df_activities = optimize_dataframe(df_activities, SAMPLE_SIZE)
        
        if df_activities.empty:
            recommendations.append("üìù –ù–∞—á–Ω–∏—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏!")
            return recommendations
        
        # –ê–Ω–∞–ª–∏–∑ –≤–ª–∏—è–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
        activity_impact = analyze_activity_impact(df_emotion, df_activities)
        
        if activity_impact:
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–ª–∏—è–Ω–∏—é
            sorted_activities = sorted(activity_impact.items(), key=lambda x: x[1], reverse=True)
            
            # –¢–æ–ø –ø–æ–ª–µ–∑–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
            positive_activities = [(act, impact) for act, impact in sorted_activities if impact > 0.3]
            if positive_activities:
                recommendations.append("üéØ –í–∞—à–∏ —Å–∞–º—ã–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è:")
                for activity, impact in positive_activities[:3]:
                    recommendations.append(f"   ‚Ä¢ {activity}: +{impact:.1f} –±–∞–ª–ª–∞ –∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é")
                recommendations.append("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: —É–≤–µ–ª–∏—á—å—Ç–µ –≤—Ä–µ–º—è –Ω–∞ —ç—Ç–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏!")
            
            # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–º –≤–ª–∏—è–Ω–∏–µ–º
            negative_activities = [(act, impact) for act, impact in sorted_activities if impact < -0.3]
            if negative_activities:
                recommendations.append("‚ö†Ô∏è –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–Ω–∏–∂–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ:")
                for activity, impact in negative_activities[-2:]:  # –ë–µ—Ä–µ–º 2 —Ö—É–¥—à–∏—Ö
                    recommendations.append(f"   ‚Ä¢ {activity}: {impact:.1f} –±–∞–ª–ª–∞")
                recommendations.append("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–¥—Ö–æ–¥ –∫ —ç—Ç–∏–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è–º")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        if not df_emotion.empty:
            df_emotion['hour'] = df_emotion['timestamp'].dt.hour
            hourly_mood = df_emotion.groupby('hour')['score'].mean()
            
            if len(hourly_mood) > 5:
                best_hours = hourly_mood.nlargest(3)
                worst_hours = hourly_mood.nsmallest(2)
                
                recommendations.append(f"‚è∞ –ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ –≤–∞–∂–Ω—ã–µ –¥–µ–ª–∞ –Ω–∞ {', '.join([f'{int(h)}:00' for h in best_hours.index])} - –≤ —ç—Ç–æ –≤—Ä–µ–º—è —É –≤–∞—Å –ª—É—á—à–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ")
                recommendations.append(f"üõ°Ô∏è –ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã –≤ {', '.join([f'{int(h)}:00' for h in worst_hours.index])} - –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –æ–±—ã—á–Ω–æ –Ω–∏–∂–µ")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
        if not df_physical.empty and not df_emotion.empty:
            # –ò—â–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é –º–µ–∂–¥—É —Ñ–∏–∑–∏—á–µ—Å–∫–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ–º
            merged_df = pd.merge_asof(
                df_emotion.sort_values('timestamp'),
                df_physical.sort_values('timestamp'),
                on='timestamp',
                direction='backward',
                suffixes=('_emotion', '_physical')
            )
            
            if len(merged_df) > 5:
                # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ —á–µ—Ä–µ–∑ numpy
                correlation = np.corrcoef(merged_df['score_emotion'], merged_df['score_physical'])[0, 1]
                if not np.isnan(correlation) and correlation > 0.3:
                    recommendations.append(f"üí™ –í–∞—à–µ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏–ª—å–Ω–æ –≤–ª–∏—è–µ—Ç –Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ (–∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è: {correlation:.2f})")
                    recommendations.append("üèÉ‚Äç‚ôÇÔ∏è –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: —É–¥–µ–ª–∏—Ç–µ –±–æ–ª—å—à–µ –≤–Ω–∏–º–∞–Ω–∏—è —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –∑–¥–æ—Ä–æ–≤–æ–º—É –æ–±—Ä–∞–∑—É –∂–∏–∑–Ω–∏")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}")
        recommendations.append("‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
    
    return recommendations


def generate_weekly_summary(df_emotion, df_physical):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—É—é —Å–≤–æ–¥–∫—É."""
    try:
        from datetime import datetime, timedelta
        
        if df_emotion.empty:
            return "üìä –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π —Å–≤–æ–¥–∫–∏"
        
        now = df_emotion['timestamp'].max()
        week_ago = now - timedelta(days=7)
        two_weeks_ago = now - timedelta(days=14)
        
        current_week = df_emotion[df_emotion['timestamp'] >= week_ago]
        previous_week = df_emotion[
            (df_emotion['timestamp'] >= two_weeks_ago) & 
            (df_emotion['timestamp'] < week_ago)
        ]
        
        if current_week.empty:
            return "üìä –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é"
        
        summary = ["üìä –í–ê–®–ê –ù–ï–î–ï–õ–¨–ù–ê–Ø –°–í–û–î–ö–ê\n"]
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏
        current_avg = current_week['score'].mean()
        current_count = len(current_week)
        current_stability = current_week['score'].std()
        
        summary.append(f"üìà –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –Ω–µ–¥–µ–ª–∏: {current_avg:.1f}/10")
        summary.append(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: {current_count}")
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–π –Ω–µ–¥–µ–ª–µ–π
        if not previous_week.empty:
            previous_avg = previous_week['score'].mean()
            change = current_avg - previous_avg
            
            if change > 0.3:
                summary.append(f"üìà –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —É–ª—É—á—à–∏–ª–æ—Å—å –Ω–∞ {change:.1f} –±–∞–ª–ª–∞ –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –ø—Ä–æ—à–ª–æ–π –Ω–µ–¥–µ–ª–µ–π! üéâ")
            elif change < -0.3:
                summary.append(f"üìâ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–Ω–∏–∑–∏–ª–æ—Å—å –Ω–∞ {abs(change):.1f} –±–∞–ª–ª–∞ –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –ø—Ä–æ—à–ª–æ–π –Ω–µ–¥–µ–ª–µ–π")
            else:
                summary.append("üìä –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –æ—Å—Ç–∞–ª–æ—Å—å –ø—Ä–∏–º–µ—Ä–Ω–æ –Ω–∞ —Ç–æ–º –∂–µ —É—Ä–æ–≤–Ω–µ")
        
        # –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å
        if current_stability < 1.0:
            summary.append("üéØ –í–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –±—ã–ª–æ –æ—á–µ–Ω—å —Å—Ç–∞–±–∏–ª—å–Ω—ã–º –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ!")
        elif current_stability > 2.0:
            summary.append("üé¢ –ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–∏–ª—å–Ω–æ –∫–æ–ª–µ–±–∞–ª–æ—Å—å")
        
        # –õ—É—á—à–∏–π –∏ —Ö—É–¥—à–∏–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
        if len(current_week) > 2:
            current_week['day_name'] = current_week['timestamp'].dt.day_name()
            day_mapping = {
                'Monday': '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', 'Tuesday': '–í—Ç–æ—Ä–Ω–∏–∫', 'Wednesday': '–°—Ä–µ–¥–∞',
                'Thursday': '–ß–µ—Ç–≤–µ—Ä–≥', 'Friday': '–ü—è—Ç–Ω–∏—Ü–∞', 'Saturday': '–°—É–±–±–æ—Ç–∞', 'Sunday': '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
            }
            current_week['day_name_ru'] = current_week['day_name'].replace(day_mapping)
            
            daily_avg = current_week.groupby('day_name_ru')['score'].mean()
            if len(daily_avg) > 1:
                best_day = daily_avg.idxmax()
                worst_day = daily_avg.idxmin()
                
                summary.append(f"‚ú® –õ—É—á—à–∏–π –¥–µ–Ω—å: {best_day} ({daily_avg[best_day]:.1f}/10)")
                summary.append(f"üòî –°–ª–æ–∂–Ω—ã–π –¥–µ–Ω—å: {worst_day} ({daily_avg[worst_day]:.1f}/10)")
        
        # –§–∏–∑–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ)
        if not df_physical.empty:
            current_week_physical = df_physical[df_physical['timestamp'] >= week_ago]
            if not current_week_physical.empty:
                physical_avg = current_week_physical['score'].mean()
                summary.append(f"üí™ –°—Ä–µ–¥–Ω–µ–µ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {physical_avg:.1f}/5")
        
        return "\n".join(summary)
        
    except Exception as e:
        logger.error(f"Error generating weekly summary: {e}")
        return "‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–¥–µ–ª—å–Ω–æ–π —Å–≤–æ–¥–∫–∏"


def generate_smart_insights(df_emotion, df_physical, df_activities):
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∏–Ω—Å–∞–π—Ç–æ–≤."""
    try:
        all_insights = []
        
        # –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
        mood_patterns = analyze_mood_patterns(df_emotion)
        all_insights.extend(mood_patterns)
        
        # –£–º–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if len(df_emotion) >= 5:  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö
            all_insights.append("")  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
            recommendations = generate_smart_recommendations(df_emotion, df_physical, df_activities)
            all_insights.extend(recommendations)
        
        # –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞ (–µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –º–Ω–æ–≥–æ)
        if len(df_emotion) >= 10:
            all_insights.append("")
            weekly_summary = generate_weekly_summary(df_emotion, df_physical)
            all_insights.append(weekly_summary)
        
        if not all_insights:
            return "üìä –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –∏–Ω—Å–∞–π—Ç–æ–≤!"
        
        return "\n".join(all_insights)
        
    except Exception as e:
        logger.error(f"Error generating smart insights: {e}")
        return "‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–Ω—Å–∞–π—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."


def should_generate_smart_insights(df_emotion, df_physical, df_activities):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–º–Ω—ã—Ö –∏–Ω—Å–∞–π—Ç–æ–≤."""
    return len(df_emotion) >= 5  # –ú–∏–Ω–∏–º—É–º 5 –∑–∞–ø–∏—Å–µ–π –¥–ª—è –±–∞–∑–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ 

@monitor_performance("plot_daily_states")
def plot_daily_states(stats, title, ylabel, colormap=None):
    """–£–õ–£–ß–®–ï–ù–ù–´–ô –≥—Ä–∞—Ñ–∏–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π —Å –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è–º–∏ —ç–∫—Å—Ç—Ä–µ–º—É–º–æ–≤."""
    plt.style.use('default')
    
    if colormap is None:
        colormap = plt.cm.get_cmap('viridis')
    norm = mcolors.Normalize(vmin=stats['count'].min(), vmax=stats['count'].max())

    # –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –£–º–µ–Ω—å—à–∏–ª–∏ —Ä–∞–∑–º–µ—Ä —Å 16x14 –¥–æ 12x10 –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏
    fig, axes = plt.subplots(2, 1, figsize=(12, 10), sharex=True)
    
    weekday_color = '#3498DB'
    weekend_color = '#E74C3C'

    for i, day_type in enumerate(['–ë—É–¥–Ω–∏–π –¥–µ–Ω—å', '–í—ã—Ö–æ–¥–Ω–æ–π']):
        df_day = stats[stats['day_type'] == day_type]
        
        main_color = weekday_color if day_type == '–ë—É–¥–Ω–∏–π –¥–µ–Ω—å' else weekend_color
        
        if len(df_day) == 0:
            axes[i].text(0.5, 0.5, f'–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è\n{day_type}', 
                        ha='center', va='center', fontsize=14,  # –£–º–µ–Ω—å—à–∏–ª–∏ —à—Ä–∏—Ñ—Ç
                        bbox=dict(boxstyle="round,pad=0.5", facecolor='lightgray', alpha=0.8))
            axes[i].set_title(f'{title} ({day_type})', fontsize=14, fontweight='bold', pad=20)  # –£–º–µ–Ω—å—à–∏–ª–∏
            axes[i].grid(axis='y', linestyle='--', alpha=0.3)
            continue

        colors = colormap(norm(df_day['count']))

        # –û—Å–Ω–æ–≤–Ω–∞—è –ª–∏–Ω–∏—è
        axes[i].plot(
            df_day['hour'].values, df_day['mean'].values, 
            color=main_color, linestyle='-', linewidth=3, 
            label=day_type, alpha=0.9
        )
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–º–µ–Ω—å—à–µ–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ç–æ—á–µ–∫ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        scatter = axes[i].scatter(
            df_day['hour'].values, df_day['mean'].values,
            c=colors, s=df_day['count']*10+25, edgecolor='white',  # –£–º–µ–Ω—å—à–∏–ª–∏ —Å *20+50 –¥–æ *10+25
            linewidth=1.5, alpha=0.9, zorder=5
        )
        
        # –î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
        axes[i].fill_between(
            df_day['hour'].values,
            df_day['ci_lower'].values,
            df_day['ci_upper'].values,
            color=main_color, alpha=0.2, label='–î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª'
        )
        
        # –ù–û–í–û–ï: –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        if len(df_day) > 1:
            max_idx = df_day['mean'].idxmax()
            min_idx = df_day['mean'].idxmin()
            
            max_hour = df_day.loc[max_idx, 'hour']
            max_value = df_day.loc[max_idx, 'mean']
            min_hour = df_day.loc[min_idx, 'hour']
            min_value = df_day.loc[min_idx, 'mean']
            
            # –ê–Ω–Ω–æ—Ç–∞—Ü–∏—è –º–∞–∫—Å–∏–º—É–º–∞
            axes[i].annotate(f'–ü–∏–∫: {max_value:.1f}',
                           xy=(max_hour, max_value),
                           xytext=(10, 15), textcoords='offset points',
                           bbox=dict(boxstyle="round,pad=0.3", facecolor='lightgreen', alpha=0.8),
                           arrowprops=dict(arrowstyle='->', color='green', lw=1.5),
                           fontsize=9, fontweight='bold')  # –£–º–µ–Ω—å—à–∏–ª–∏ —à—Ä–∏—Ñ—Ç
            
            # –ê–Ω–Ω–æ—Ç–∞—Ü–∏—è –º–∏–Ω–∏–º—É–º–∞
            axes[i].annotate(f'–ú–∏–Ω–∏–º—É–º: {min_value:.1f}',
                           xy=(min_hour, min_value),
                           xytext=(10, -25), textcoords='offset points',
                           bbox=dict(boxstyle="round,pad=0.3", facecolor='lightcoral', alpha=0.8),
                           arrowprops=dict(arrowstyle='->', color='red', lw=1.5),
                           fontsize=9, fontweight='bold')  # –£–º–µ–Ω—å—à–∏–ª–∏ —à—Ä–∏—Ñ—Ç
        
        # –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è
        axes[i].set_title(f'{title} ({day_type})', fontsize=14, fontweight='bold', pad=20)  # –£–º–µ–Ω—å—à–∏–ª–∏
        axes[i].set_ylabel(ylabel, fontsize=12, fontweight='bold')  # –£–º–µ–Ω—å—à–∏–ª–∏
        axes[i].grid(True, alpha=0.3, linestyle='--')
        axes[i].set_xticks(range(0, 24, 2))
        axes[i].tick_params(axis='both', labelsize=11)  # –£–º–µ–Ω—å—à–∏–ª–∏
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–Ω–∞—á–∏–º—ã—Ö —Ç–æ—á–µ–∫ (–º–µ–Ω—å—à–µ —Ç–µ–∫—Å—Ç–∞)
        for hour, mean_val, count in zip(df_day['hour'], df_day['mean'], df_day['count']):
            if count >= 5:  # –ü–æ–≤—ã—Å–∏–ª–∏ –ø–æ—Ä–æ–≥ —Å 3 –¥–æ 5 –¥–ª—è –º–µ–Ω—å—à–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–¥–ø–∏—Å–µ–π
                axes[i].annotate(f'{mean_val:.1f}', 
                               (hour, mean_val), 
                               textcoords="offset points", 
                               xytext=(0,8), 
                               ha='center', fontsize=8, fontweight='bold',  # –£–º–µ–Ω—å—à–∏–ª–∏ —à—Ä–∏—Ñ—Ç
                               bbox=dict(boxstyle="round,pad=0.15", facecolor='white', alpha=0.9))

    # –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    axes[1].set_xlabel('–ß–∞—Å –¥–Ω—è', fontsize=12, fontweight='bold')  # –£–º–µ–Ω—å—à–∏–ª–∏
    axes[0].legend(loc='upper right', fontsize=11, framealpha=0.9)  # –£–º–µ–Ω—å—à–∏–ª–∏
    
    fig.suptitle(f'{title}', fontsize=16, fontweight='bold', y=0.96)  # –£–º–µ–Ω—å—à–∏–ª–∏
    
    fig.text(0.5, 0.02, 
            '–†–∞–∑–º–µ—Ä —Ç–æ—á–µ–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π. –ü–∏–∫–∏ –∏ –º–∏–Ω–∏–º—É–º—ã –≤—ã–¥–µ–ª–µ–Ω—ã –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è–º–∏.',
            ha='center', fontsize=10, style='italic',  # –£–º–µ–Ω—å—à–∏–ª–∏
            bbox=dict(boxstyle="round,pad=0.5", facecolor='lightblue', alpha=0.3))
    
    plt.tight_layout()
    plt.subplots_adjust(top=0.88, bottom=0.12)
    
    # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏
    gc.collect()

def plot_frequency_analysis(df, title, ylabel):
    """–ß–∞—Å—Ç–æ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è."""
    daily_mean = df.groupby(df['timestamp'].dt.date)['score'].mean()
    fft_result = np.fft.fft(daily_mean)
    frequencies = np.fft.fftfreq(len(daily_mean))

    periods = 1 / frequencies[1:len(frequencies) // 2]
    amplitudes = np.abs(fft_result[1:len(frequencies) // 2])

    plt.figure(figsize=(14, 8))
    plt.plot(periods, amplitudes, color='green')
    plt.title(title, fontsize=16)
    plt.xlabel('–ü–µ—Ä–∏–æ–¥ (–¥–Ω–∏)', fontsize=12)
    plt.ylabel(ylabel, fontsize=12)
    plt.grid(axis='y', linestyle='--', alpha=0.7)

def plot_simple_summary(df, title, ylabel):
    """–ü—Ä–æ—Å—Ç–æ–π –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è –º–∞–ª–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö."""
    fig, ax = plt.subplots(figsize=(10, 6))
    
    # –ü—Ä–æ—Å—Ç–æ–π bar chart —Å –¥–∞—Ç–∞–º–∏
    dates = pd.to_datetime(df['timestamp']).dt.strftime('%m-%d %H:%M')
    scores = df['score']
    
    bars = ax.bar(range(len(dates)), scores, color='lightblue', alpha=0.7)
    ax.set_xlabel('–í—Ä–µ–º—è –∑–∞–ø–∏—Å–∏')
    ax.set_ylabel(ylabel)
    ax.set_title(title)
    ax.set_xticks(range(len(dates)))
    ax.set_xticklabels(dates, rotation=45, ha='right')
    ax.grid(True, alpha=0.3)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
    for i, (bar, score) in enumerate(zip(bars, scores)):
        ax.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 0.1, 
                f'{score:.1f}', ha='center', va='bottom')
    
    plt.tight_layout()
    return fig

def merge_activities_with_states(df_activities, df_states, state_type):
    """–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏."""
    merged_data = []
    
    for _, activity_row in df_activities.iterrows():
        activity_time = pd.to_datetime(activity_row['timestamp'])
        
        # –ò—â–µ–º –±–ª–∏–∂–∞–π—à–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 2 —á–∞—Å–æ–≤ –ø–æ—Å–ª–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        time_diff = pd.to_datetime(df_states['timestamp']) - activity_time
        valid_states = df_states[
            (time_diff >= pd.Timedelta(0)) & 
            (time_diff <= pd.Timedelta(hours=2))
        ]
        
        if len(valid_states) > 0:
            # –ë–µ—Ä–µ–º –±–ª–∏–∂–∞–π—à–µ–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            closest_state = valid_states.loc[time_diff[valid_states.index].idxmin()]
            merged_data.append({
                'activity': activity_row['activity'],
                'score': closest_state['score'],
                'timestamp': activity_time,
                'state_timestamp': closest_state['timestamp']
            })
    
    return pd.DataFrame(merged_data)

def generate_activity_insights(emotion_stats, physical_stats):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫—Ä–∞—Å–∏–≤—ã–µ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∏–Ω—Å–∞–π—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π."""
    insights = []
    
    if len(emotion_stats) > 0:
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å—Ä–µ–¥–Ω–µ–º—É –∑–Ω–∞—á–µ–Ω–∏—é
        emotion_stats_sorted = emotion_stats.sort_values('mean', ascending=False)
        best_emotion = emotion_stats_sorted.iloc[0]
        worst_emotion = emotion_stats_sorted.iloc[-1]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
        def get_mood_level(score):
            if score >= 8:
                return "–æ—Ç–ª–∏—á–Ω–æ–µ", "üåü"
            elif score >= 6:
                return "—Ö–æ—Ä–æ—à–µ–µ", "üòä"
            elif score >= 4:
                return "—Å—Ä–µ–¥–Ω–µ–µ", "üòê"
            else:
                return "–Ω–∏–∑–∫–æ–µ", "üòî"
        
        best_level, best_emoji = get_mood_level(best_emotion['mean'])
        worst_level, worst_emoji = get_mood_level(worst_emotion['mean'])
        
        insights.append(
            f"{best_emoji} *–õ—É—á—à–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è:* "
            f"**{best_emotion['activity']}**\n"
            f"   ‚îî –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {best_emotion['mean']:.1f}/10 ({best_level} –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ)\n"
            f"   ‚îî –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: {best_emotion['count']}"
        )
        
        if len(emotion_stats) > 1:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ö—É–¥—à—É—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–∞–∑–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            insights.append(
                f"{worst_emoji} *–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å –Ω–∏–∑–∫–∏–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ–º:* "
                f"**{worst_emotion['activity']}**\n"
                f"   ‚îî –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {worst_emotion['mean']:.1f}/10 ({worst_level} –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ)\n"
                f"   ‚îî –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: {worst_emotion['count']}"
            )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —ç–º–æ—Ü–∏—è–º
        total_records = emotion_stats['count'].sum()
        avg_mood = (emotion_stats['mean'] * emotion_stats['count']).sum() / total_records
        avg_level, avg_emoji = get_mood_level(avg_mood)
        
        insights.append(
            f"üìä *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è:*\n"
            f"   ‚îî –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –ø–æ –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è–º: {avg_mood:.1f}/10 ({avg_level})\n"
            f"   ‚îî –í—Å–µ–≥–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {total_records}"
        )
    
    if len(physical_stats) > 0:
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å—Ä–µ–¥–Ω–µ–º—É –∑–Ω–∞—á–µ–Ω–∏—é
        physical_stats_sorted = physical_stats.sort_values('mean', ascending=False)
        best_physical = physical_stats_sorted.iloc[0]
        worst_physical = physical_stats_sorted.iloc[-1]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        def get_physical_level(score):
            if score >= 4:
                return "–æ—Ç–ª–∏—á–Ω–æ–µ", "üí™"
            elif score >= 3:
                return "–Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ", "üëç"
            elif score >= 2:
                return "–ø–ª–æ—Ö–æ–µ", "üòü"
            else:
                return "–æ—á–µ–Ω—å –ø–ª–æ—Ö–æ–µ", "ü§¢"
        
        best_p_level, best_p_emoji = get_physical_level(best_physical['mean'])
        worst_p_level, worst_p_emoji = get_physical_level(worst_physical['mean'])
        
        insights.append(
            f"{best_p_emoji} *–õ—É—á—à–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è:* "
            f"**{best_physical['activity']}**\n"
            f"   ‚îî –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {best_physical['mean']:.1f}/5 ({best_p_level} —Å–æ—Å—Ç–æ—è–Ω–∏–µ)\n"
            f"   ‚îî –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: {best_physical['count']}"
        )
        
        if len(physical_stats) > 1:
            insights.append(
                f"{worst_p_emoji} *–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å –Ω–∏–∑–∫–∏–º —Ñ–∏–∑–∏—á–µ—Å–∫–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º:* "
                f"**{worst_physical['activity']}**\n"
                f"   ‚îî –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {worst_physical['mean']:.1f}/5 ({worst_p_level} —Å–æ—Å—Ç–æ—è–Ω–∏–µ)\n"
                f"   ‚îî –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: {worst_physical['count']}"
            )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
        total_p_records = physical_stats['count'].sum()
        avg_physical = (physical_stats['mean'] * physical_stats['count']).sum() / total_p_records
        avg_p_level, avg_p_emoji = get_physical_level(avg_physical)
        
        insights.append(
            f"üèÉ *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è:*\n"
            f"   ‚îî –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –ø–æ –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è–º: {avg_physical:.1f}/5 ({avg_p_level})\n"
            f"   ‚îî –í—Å–µ–≥–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {total_p_records}"
        )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if len(emotion_stats) > 0 and len(physical_stats) > 0:
        # –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ä–æ—à–∏ –∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è, –∏ –¥–ª—è —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        emotion_dict = {row['activity']: row['mean'] for _, row in emotion_stats.iterrows()}
        physical_dict = {row['activity']: row['mean'] for _, row in physical_stats.iterrows()}
        
        best_overall = []
        for activity in emotion_dict:
            if activity in physical_dict:
                combined_score = (emotion_dict[activity] / 10 * 0.6) + (physical_dict[activity] / 5 * 0.4)
                best_overall.append((activity, combined_score, emotion_dict[activity], physical_dict[activity]))
        
        if best_overall:
            best_overall.sort(key=lambda x: x[1], reverse=True)
            top_activity = best_overall[0]
            
            insights.append(
                f"üéØ *–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:*\n"
                f"   ‚îî **{top_activity[0]}** - –ª—É—á—à–∏–π –±–∞–ª–∞–Ω—Å –¥–ª—è –æ–±—â–µ–≥–æ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—è\n"
                f"   ‚îî –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {top_activity[2]:.1f}/10, –§–∏–∑–∏—á–µ—Å–∫–æ–µ: {top_activity[3]:.1f}/5"
            )
    
    return insights

@monitor_performance("plot_activity_correlation")
def plot_activity_correlation(correlations, title="–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è"):
    """–°–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Å–∏–≤—ã–π –≥—Ä–∞—Ñ–∏–∫ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –º–µ–∂–¥—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è–º–∏ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏."""
    plt.style.use('default')
    
    fig = plt.figure(figsize=(16, 12))
    gs = fig.add_gridspec(2, 2, height_ratios=[1, 1], width_ratios=[1, 1], 
                         hspace=0.4, wspace=0.3)
    
    # –ì—Ä–∞—Ñ–∏–∫ –¥–ª—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    ax1 = fig.add_subplot(gs[0, :])
    
    if correlations['emotion']:
        emotion_df = pd.DataFrame(correlations['emotion'])
        emotion_df = emotion_df.sort_values('mean', ascending=True)
        
        # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–µ —Ü–≤–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–∏–π
        colors = []
        for mean_val in emotion_df['mean']:
            if mean_val >= 8:
                colors.append('#2ECC71')  # –ó–µ–ª–µ–Ω—ã–π –¥–ª—è –æ—Ç–ª–∏—á–Ω—ã—Ö
            elif mean_val >= 6:
                colors.append('#F39C12')  # –û—Ä–∞–Ω–∂–µ–≤—ã–π –¥–ª—è —Ö–æ—Ä–æ—à–∏—Ö
            elif mean_val >= 4:
                colors.append('#E74C3C')  # –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è –ø–ª–æ—Ö–∏—Ö
            else:
                colors.append('#8E44AD')  # –§–∏–æ–ª–µ—Ç–æ–≤—ã–π –¥–ª—è –æ—á–µ–Ω—å –ø–ª–æ—Ö–∏—Ö
        
        # –°–æ–∑–¥–∞–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π bar chart
        bars = ax1.barh(emotion_df['activity'], emotion_df['mean'], 
                       color=colors, alpha=0.8, edgecolor='white', linewidth=2)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç —ç—Ñ—Ñ–µ–∫—Ç
        for i, (bar, mean_val, count) in enumerate(zip(bars, emotion_df['mean'], emotion_df['count'])):
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–∞–ø–∏—Å–µ–π
            ax1.text(bar.get_width() + 0.2, bar.get_y() + bar.get_height()/2, 
                    f'{mean_val:.1f}\n({count} –∑–∞–ø.)', 
                    va='center', ha='left', fontweight='bold', fontsize=11,
                    bbox=dict(boxstyle="round,pad=0.3", facecolor='white', alpha=0.8))
        
        # –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è –æ—Å–∏
        ax1.set_xlabel('–°—Ä–µ–¥–Ω–µ–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (1-10)', fontsize=14, fontweight='bold')
        ax1.set_title('–í–ª–∏—è–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ', fontsize=16, fontweight='bold', pad=25)
        ax1.grid(True, alpha=0.3, linestyle='--')
        ax1.set_xlim(0, 11)
        
        ax1.tick_params(axis='y', labelsize=12)
        ax1.tick_params(axis='x', labelsize=12)
        
    else:
        ax1.text(0.5, 0.5, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö\n–¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —ç–º–æ—Ü–∏–π', 
                ha='center', va='center', transform=ax1.transAxes, 
                fontsize=16, bbox=dict(boxstyle="round,pad=0.5", facecolor='lightgray', alpha=0.8))
        ax1.set_title('–í–ª–∏—è–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ', fontsize=16, fontweight='bold', pad=25)
    
    # –ì—Ä–∞—Ñ–∏–∫ –¥–ª—è —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    ax2 = fig.add_subplot(gs[1, :])
    
    if correlations['physical']:
        physical_df = pd.DataFrame(correlations['physical'])
        physical_df = physical_df.sort_values('mean', ascending=True)
        
        colors = []
        for mean_val in physical_df['mean']:
            if mean_val >= 4:
                colors.append('#27AE60')  # –ó–µ–ª–µ–Ω—ã–π –¥–ª—è –æ—Ç–ª–∏—á–Ω–æ–≥–æ
            elif mean_val >= 3:
                colors.append('#F1C40F')  # –ñ–µ–ª—Ç—ã–π –¥–ª—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ
            elif mean_val >= 2:
                colors.append('#E67E22')  # –û—Ä–∞–Ω–∂–µ–≤—ã–π –¥–ª—è –ø–ª–æ—Ö–æ–≥–æ
            else:
                colors.append('#E74C3C')  # –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è –æ—á–µ–Ω—å –ø–ª–æ—Ö–æ–≥–æ
        
        bars = ax2.barh(physical_df['activity'], physical_df['mean'], 
                       color=colors, alpha=0.8, edgecolor='white', linewidth=2)
        
        for bar, mean_val, count in zip(bars, physical_df['mean'], physical_df['count']):
            ax2.text(bar.get_width() + 0.1, bar.get_y() + bar.get_height()/2, 
                    f'{mean_val:.1f}\n({count} –∑–∞–ø.)', 
                    va='center', ha='left', fontweight='bold', fontsize=11,
                    bbox=dict(boxstyle="round,pad=0.3", facecolor='white', alpha=0.8))
        
        ax2.set_xlabel('–°—Ä–µ–¥–Ω–µ–µ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (1-5)', fontsize=14, fontweight='bold')
        ax2.set_title('–í–ª–∏—è–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –Ω–∞ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ', fontsize=16, fontweight='bold', pad=25)
        ax2.grid(True, alpha=0.3, linestyle='--')
        ax2.set_xlim(0, 6)
        
        ax2.tick_params(axis='y', labelsize=12)
        ax2.tick_params(axis='x', labelsize=12)
        
    else:
        ax2.text(0.5, 0.5, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö\n–¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ\n—Å–æ—Å—Ç–æ—è–Ω–∏—è', 
                ha='center', va='center', transform=ax2.transAxes, 
                fontsize=16, bbox=dict(boxstyle="round,pad=0.5", facecolor='lightgray', alpha=0.8))
        ax2.set_title('–í–ª–∏—è–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –Ω–∞ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ', fontsize=16, fontweight='bold', pad=25)
    
    # –û–±—â–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
    fig.suptitle('–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –∏ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—è', 
                fontsize=20, fontweight='bold', y=0.96)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    fig.text(0.5, 0.02, 
            '–ê–Ω–∞–ª–∏–∑ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ª—É—á—à–µ –≤—Å–µ–≥–æ –≤–ª–∏—è—é—Ç –Ω–∞ –≤–∞—à–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.',
            ha='center', fontsize=12, style='italic', 
            bbox=dict(boxstyle="round,pad=0.5", facecolor='lightblue', alpha=0.3))
    
    plt.tight_layout()
    plt.subplots_adjust(top=0.88, bottom=0.15)
    
    return fig

def generate_correlation_insights_text(correlations):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫—Ä–∞—Å–∏–≤–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–Ω—Å–∞–π—Ç–æ–≤ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞."""
    if not correlations['insights']:
        return (
            "üìä *–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑*\n\n"
            "üîç –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.\n\n"
            "üìà *–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å–∞–π—Ç–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:*\n"
            "‚Ä¢ –ú–∏–Ω–∏–º—É–º 5 –∑–∞–ø–∏—Å–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π\n"
            "‚Ä¢ –ú–∏–Ω–∏–º—É–º 5 –∑–∞–ø–∏—Å–µ–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è\n"
            "‚Ä¢ –ú–∏–Ω–∏–º—É–º 3 –∑–∞–ø–∏—Å–∏ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è\n\n"
            "üéØ –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∑–∞–ø–æ–ª–Ω—è—Ç—å –¥–Ω–µ–≤–Ω–∏–∫, –∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏!"
        )
    
    insights_text = "üìä *–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π*\n\n"
    
    for i, insight in enumerate(correlations['insights']):
        insights_text += f"{insight}\n\n"
    
    insights_text += (
        "üí° *–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ:*\n"
        "‚Ä¢ –ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ –±–æ–ª—å—à–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π —Å –≤—ã—Å–æ–∫–∏–º–∏ –±–∞–ª–ª–∞–º–∏\n"
        "‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤ —Å–≤–æ–µ–º –ø–æ–≤–µ–¥–µ–Ω–∏–∏\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '—Ö–æ—Ä–æ—à–∏–µ' –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ —Ç—Ä—É–¥–Ω—ã–µ –¥–Ω–∏\n\n"
        "üîÑ –ê–Ω–∞–ª–∏–∑ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è —Å –∫–∞–∂–¥–æ–π –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å—å—é!"
    )
    
    return insights_text

def plot_heatmap_simple(df, title="–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ –¥–Ω—è–º –∏ —á–∞—Å–∞–º", state_type="emotion"):
    """–£–ü–†–û–©–Å–ù–ù–ê–Ø –∏ –±–æ–ª–µ–µ —á–∏—Ç–∞–µ–º–∞—è –≤–µ—Ä—Å–∏—è —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ—Å—Ç–æ—è–Ω–∏–π."""
    plt.style.use('default')
    
    # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    df = optimize_dataframe(df, MAX_HEATMAP_DAYS * 24)
    
    if len(df) < 15:  # –ü–æ–≤—ã—Å–∏–ª–∏ –º–∏–Ω–∏–º—É–º –¥–ª—è –±–æ–ª–µ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        fig, ax = plt.subplots(figsize=(10, 5))  # –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –£–º–µ–Ω—å—à–∏–ª–∏ —Ä–∞–∑–º–µ—Ä –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏
        ax.text(0.5, 0.5, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö\n–¥–ª—è –∫–∞—Ä—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è\n\n(–º–∏–Ω–∏–º—É–º 15 –∑–∞–ø–∏—Å–µ–π)', 
               ha='center', va='center', fontsize=16,
               bbox=dict(boxstyle="round,pad=0.5", facecolor='lightgray', alpha=0.8))
        ax.set_title(title, fontsize=16, fontweight='bold')
        ax.axis('off')
        return
    
    try:
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ
        df_copy = df.copy()
        df_copy['day_of_week'] = df_copy['timestamp'].dt.day_name()
        df_copy['hour'] = df_copy['timestamp'].dt.hour
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π
        day_mapping = {
            'Monday': '–ü–Ω', 'Tuesday': '–í—Ç', 'Wednesday': '–°—Ä',  # –°–æ–∫—Ä–∞—â—ë–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
            'Thursday': '–ß—Ç', 'Friday': '–ü—Ç', 'Saturday': '–°–±', 'Sunday': '–í—Å'
        }
        df_copy['day_ru'] = df_copy['day_of_week'].replace(day_mapping)
        
        # –£–ü–†–û–©–ï–ù–ò–ï: –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ 3-—á–∞—Å–æ–≤—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        df_copy['hour_group'] = (df_copy['hour'] // 3) * 3
        hour_labels = {0: '0-2', 3: '3-5', 6: '6-8', 9: '9-11', 12: '12-14', 15: '15-17', 18: '18-20', 21: '21-23'}
        
        # –°–æ–∑–¥–∞–µ–º —É–ø—Ä–æ—â—ë–Ω–Ω—É—é pivot table
        heatmap_data = df_copy.pivot_table(
            values='score', 
            index='day_ru', 
            columns='hour_group', 
            aggfunc='mean',
            fill_value=np.nan
        )
        
        # –ü–µ—Ä–µ—É–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–µ–º –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏
        day_order = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å']
        heatmap_data = heatmap_data.reindex(day_order)
        
        # –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –£–º–µ–Ω—å—à–∏–ª–∏ —Ä–∞–∑–º–µ—Ä —Ñ–∏–≥—É—Ä—ã –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏
        fig, ax = plt.subplots(figsize=(10, 6))  # –ë—ã–ª–æ 12x8, —Å—Ç–∞–ª–æ 10x6
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if state_type == "physical":
            # –î–ª—è —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è (1-5)
            center_val = 3
            vmin_val = 1
            vmax_val = 5
            label_text = '–°—Ä–µ–¥–Ω–µ–µ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (1-5)'
            explanation = '–ó–µ–ª—ë–Ω—ã–π = —Ö–æ—Ä–æ—à–µ–µ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ, –ö—Ä–∞—Å–Ω—ã–π = –ø–ª–æ—Ö–æ–µ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ. –ü—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏ = –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö.'
        else:
            # –î–ª—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è (1-10)
            center_val = 5.5
            vmin_val = 1
            vmax_val = 10
            label_text = '–°—Ä–µ–¥–Ω–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ (1-10)'
            explanation = '–ó–µ–ª—ë–Ω—ã–π = —Ö–æ—Ä–æ—à–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, –ö—Ä–∞—Å–Ω—ã–π = –ø–ª–æ—Ö–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ. –ü—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏ = –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö.'
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—É—é –∏ –ø–æ–Ω—è—Ç–Ω—É—é —Ü–≤–µ—Ç–æ–≤—É—é —Å—Ö–µ–º—É
        mask = heatmap_data.isna()
        
        sns.heatmap(
            heatmap_data, 
            cmap='RdYlGn',  # –ü—Ä–æ—Å—Ç–∞—è —Ü–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞: –∫—Ä–∞—Å–Ω—ã–π-–∂—ë–ª—Ç—ã–π-–∑–µ–ª—ë–Ω—ã–π
            center=center_val,
            vmin=vmin_val, vmax=vmax_val,
            mask=mask,
            cbar_kws={'label': label_text, 'shrink': 0.8},
            linewidths=1,  # –ß—ë—Ç–∫–∏–µ –≥—Ä–∞–Ω–∏—Ü—ã
            linecolor='white',
            annot=True,  # –í–ö–õ–Æ–ß–ò–õ–ò –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
            fmt='.1f',
            annot_kws={'size': 10, 'weight': 'bold'},  # –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –£–º–µ–Ω—å—à–∏–ª–∏ —à—Ä–∏—Ñ—Ç —Å 12 –¥–æ 10
            square=True,  # –ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —è—á–µ–π–∫–∏
            ax=ax
        )
        
        # –ü—Ä–æ—Å—Ç—ã–µ –∏ –ø–æ–Ω—è—Ç–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∏
        ax.set_xticklabels([hour_labels.get(col, str(col)) for col in heatmap_data.columns], 
                          fontsize=11, fontweight='bold')  # –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –£–º–µ–Ω—å—à–∏–ª–∏ —à—Ä–∏—Ñ—Ç
        ax.set_yticklabels(heatmap_data.index, fontsize=11, fontweight='bold', rotation=0)
        
        ax.set_title(title, fontsize=14, fontweight='bold', pad=15)  # –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –£–º–µ–Ω—å—à–∏–ª–∏ —Ä–∞–∑–º–µ—Ä
        ax.set_xlabel('–í—Ä–µ–º—è –¥–Ω—è (—á–∞—Å—ã)', fontsize=12, fontweight='bold')
        ax.set_ylabel('–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏', fontsize=12, fontweight='bold')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–Ω—è—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å—å
        fig.text(0.5, 0.02, explanation,
                ha='center', fontsize=10, style='italic',  # –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –£–º–µ–Ω—å—à–∏–ª–∏ —à—Ä–∏—Ñ—Ç
                bbox=dict(boxstyle="round,pad=0.4", facecolor='lightblue', alpha=0.7))
        
        plt.tight_layout()
        plt.subplots_adjust(bottom=0.15)
        
        # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏
        gc.collect()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É–ø—Ä–æ—â—ë–Ω–Ω–æ–π –∫–∞—Ä—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è: {e}")
        # Fallback –∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
        fig, ax = plt.subplots(figsize=(10, 5))  # –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ú–µ–Ω—å—à–∏–π —Ä–∞–∑–º–µ—Ä –∏ –¥–ª—è –æ—à–∏–±–∫–∏
        ax.text(0.5, 0.5, '–í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞\n–∫–∞—Ä—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ', 
               ha='center', va='center', fontsize=16,
               bbox=dict(boxstyle="round,pad=0.5", facecolor='lightcoral', alpha=0.8))
        ax.set_title(title, fontsize=16, fontweight='bold')
        ax.axis('off')

def save_plot_as_image(func, filename, *args, **kwargs):
    """–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è: —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –∫–∞–∫ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –ø–∞–º—è—Ç–∏."""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
    temp_dir = tempfile.gettempdir()
    filepath = os.path.join(temp_dir, filename)
    
    try:
        func(*args, **kwargs)
        # –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –£–º–µ–Ω—å—à–∏–ª–∏ DPI —Å 300 –¥–æ 150 –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏
        plt.savefig(filepath, format='png', dpi=150, bbox_inches='tight', 
                   facecolor='white', edgecolor='none')
        
        # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ matplotlib
        plt.close('all')  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –í–°–ï —Ñ–∏–≥—É—Ä—ã
        gc.collect()      # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞
        
        return filepath
        
    except Exception as e:
        logger.error(f"Error saving plot {filename}: {e}")
        # –û—á–∏—â–∞–µ–º –ø–∞–º—è—Ç—å –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        plt.close('all')
        gc.collect()
        raise e
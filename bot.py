import asyncio
import logging
import sqlite3
from datetime import datetime, timedelta, timezone

from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, Message

from config import BOT_TOKEN
from database import (
    save_user, save_log,
    save_mood_request, update_mood_request,
    mark_request_as_unanswered,  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–º–µ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫–∞–∫ –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω–æ–≥–æ
    # –ï—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏ —Ñ—É–Ω–∫—Ü–∏—é get_pending_requests,
    # –Ω–æ –∑–¥–µ—Å—å –º—ã –±—É–¥–µ–º –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ session
    session, MoodRequest  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
)
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import pandas as pd
from analytics import generate_and_send_charts

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
DB_PATH = "/MoodTrackerBot_data/mood_tracker.db"

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
scheduler = AsyncIOScheduler()

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
timezones = ["+1 GMT", "+2 GMT", "+3 GMT", "+4 GMT"]
timezone_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text=tz)] for tz in timezones],
    resize_keyboard=True
)

analytics_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ")],
        [KeyboardButton(text="–§–∏–∑–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ")],
    ],
    resize_keyboard=True
)

mood_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üòÑ 10"), KeyboardButton(text="üòä 9"),
         KeyboardButton(text="üôÇ 8"), KeyboardButton(text="üòå 7"),
         KeyboardButton(text="üòê 6")],
        [KeyboardButton(text="üòï 5"), KeyboardButton(text="üòü 4"),
         KeyboardButton(text="üò¢ 3"), KeyboardButton(text="üò≠ 2"),
         KeyboardButton(text="ü§¢ 1")],
    ],
    resize_keyboard=True
)

physical_state_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üí™ 5"), KeyboardButton(text="üôÇ 4"),
         KeyboardButton(text="üòê 3"), KeyboardButton(text="üòü 2"),
         KeyboardButton(text="ü§¢ 1")]
    ],
    resize_keyboard=True
)

activity_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–†–∞–±–æ—Ç–∞—é / –£—á—É—Å—å")],
        [KeyboardButton(text="–ì—É–ª—è—é")],
        [KeyboardButton(text="–ó–∞–Ω–∏–º–∞—é—Å—å —Å–ø–æ—Ä—Ç–æ–º")],
        [KeyboardButton(text="–û—Ç–¥—ã—Ö–∞—é / –°–º–æ—Ç—Ä—é –≤–∏–¥–µ–æ")],
        [KeyboardButton(text="–ß–∏—Ç–∞—é —Å—Ç–∞—Ç—å—é / –∫–Ω–∏–≥—É")],
        [KeyboardButton(text="–û–±—â–∞—é—Å—å —Å –¥—Ä—É–∑—å—è–º–∏")],
        [KeyboardButton(text="–î—Ä—É–≥–æ–µ")],
    ],
    resize_keyboard=True
)

# ----------------------- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π -----------------------

@dp.message(Command("start"))
async def start_command(message: Message):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –≤—ã–±–æ—Ä —Ç–∞–π–º–∑–æ–Ω—ã."""
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ç–≤–æ—ë –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ. –í—ã–±–µ—Ä–∏ —Å–≤–æ—é —Ç–∞–π–º–∑–æ–Ω—É:",
        reply_markup=timezone_keyboard,
    )

@dp.message(lambda msg: msg.text in timezones)
async def handle_timezone_selection(message: Message):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ç–∞–π–º–∑–æ–Ω—É –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏."""
    gmt_offset = int(message.text.split(" ")[0])
    tz_str = f"Etc/GMT{gmt_offset:+d}"
    save_user(message.from_user.id, tz_str)
    await message.answer(
        f"–¢–∞–π–º–∑–æ–Ω–∞ {message.text} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! –¢–µ–ø–µ—Ä—å —è –±—É–¥—É —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å —Ç–≤–æ—ë —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–∂–¥—ã–π —á–∞—Å.",
        reply_markup=ReplyKeyboardRemove()
    )
    await send_activity_request(message.from_user.id)

async def send_activity_request(user_id):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –æ —Ç–µ–∫—É—â–µ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –ª–æ–≥–µ.
    –≠—Ç–æ –Ω–∞—á–∞–ª–æ –Ω–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞ –∑–∞–ø—Ä–æ—Å–∞.
    """
    utc_now = datetime.now(timezone.utc)
    save_log(user_id, "response_activity", utc_now)
    await bot.send_message(
        user_id,
        "–ß–µ–º —Ç—ã —Å–µ–π—á–∞—Å –∑–∞–Ω—è—Ç? –í—ã–±–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç:",
        reply_markup=activity_keyboard,
    )

@dp.message(lambda msg: msg.text in [
    "–†–∞–±–æ—Ç–∞—é / –£—á—É—Å—å",
    "–ì—É–ª—è—é",
    "–ó–∞–Ω–∏–º–∞—é—Å—å —Å–ø–æ—Ä—Ç–æ–º",
    "–û—Ç–¥—ã—Ö–∞—é / –°–º–æ—Ç—Ä—é –≤–∏–¥–µ–æ",
    "–ß–∏—Ç–∞—é —Å—Ç–∞—Ç—å—é / –∫–Ω–∏–≥—É",
    "–û–±—â–∞—é—Å—å —Å –¥—Ä—É–∑—å—è–º–∏",
    "–î—Ä—É–≥–æ–µ",
])
async def handle_activity(message: Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–µ–∫—É—â–µ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.
    –ü–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –æ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–ø–∏—Å—å –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è.
    """
    activity = message.text
    utc_now = datetime.now(timezone.utc)
    save_log(message.from_user.id, "answer_activity", utc_now, details=activity)

    await bot.send_message(
        message.from_user.id,
        f"–°–ø–∞—Å–∏–±–æ! –Ø –∑–∞–ø–∏—Å–∞–ª —Ç–≤–æ—é —Ç–µ–∫—É—â—É—é –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–∞–∫: {activity}.\n–¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π —É–∑–Ω–∞–µ–º, –∫–∞–∫ —Ç—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ.",
        reply_markup=mood_keyboard,
    )
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è (—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è) –≤ –ë–î
    save_mood_request(message.from_user.id, utc_now)

@dp.message(lambda msg: msg.text in [
    "üòÑ 10", "üòä 9", "üôÇ 8", "üòå 7", "üòê 6",
    "üòï 5", "üòü 4", "üò¢ 3", "üò≠ 2", "ü§¢ 1"
])
async def handle_emotional_state(message: Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è.
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è, –ø–æ–º–µ—á–∞—è –µ–≥–æ –∫–∞–∫ –æ—Ç–≤–µ—á–µ–Ω–Ω—ã–π.
    """
    mood_map = {
        "üòÑ 10": "–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ–µ",
        "üòä 9": "–û—á–µ–Ω—å —Ö–æ—Ä–æ—à–µ–µ",
        "üôÇ 8": "–•–æ—Ä–æ—à–µ–µ",
        "üòå 7": "–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ",
        "üòê 6": "–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ",
        "üòï 5": "–°—Ä–µ–¥–Ω–µ–µ",
        "üòü 4": "–ü–ª–æ—Ö–æ–µ",
        "üò¢ 3": "–û—á–µ–Ω—å –ø–ª–æ—Ö–æ–µ",
        "üò≠ 2": "–£–∂–∞—Å–Ω–æ–µ",
        "ü§¢ 1": "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –ø–ª–æ—Ö–æ–µ",
    }
    mood = mood_map[message.text]
    utc_now = datetime.now(timezone.utc)
    save_log(message.from_user.id, "answer_emotional", utc_now, details=mood)
    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ MoodRequest ‚Äì –ø–æ–º–µ—á–∞–µ–º, —á—Ç–æ –Ω–∞ –∑–∞–ø—Ä–æ—Å –æ—Ç–≤–µ—Ç–∏–ª–∏
    update_mood_request(message.from_user.id, utc_now)
    await message.answer(f"–°–ø–∞—Å–∏–±–æ! –Ø –∑–∞–ø–∏—Å–∞–ª —Ç–≤–æ—ë —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–∫: {mood}")
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await send_physical_state_request(message.from_user.id)

async def send_physical_state_request(user_id):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –æ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏.
    """
    utc_now = datetime.now(timezone.utc)
    save_log(user_id, "response_physical", utc_now)
    await bot.send_message(
        user_id,
        "–ö–∞–∫ —Ç—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å —Ñ–∏–∑–∏—á–µ—Å–∫–∏? –í—ã–±–µ—Ä–∏ –æ—Ü–µ–Ω–∫—É:\nüí™ 5  üôÇ 4  üòê 3  üòü 2  ü§¢ 1",
        reply_markup=physical_state_keyboard,
    )

@dp.message(lambda msg: msg.text in ["üí™ 5", "üôÇ 4", "üòê 3", "üòü 2", "ü§¢ 1"])
async def handle_physical_state(message: Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è.
    –ü–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π —Ü–∏–∫–ª –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ 1 —á–∞—Å.
    """
    physical_state_map = {
        "üí™ 5": "–û—Ç–ª–∏—á–Ω–æ–µ",
        "üôÇ 4": "–•–æ—Ä–æ—à–µ–µ",
        "üòê 3": "–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ",
        "üòü 2": "–ü–ª–æ—Ö–æ–µ",
        "ü§¢ 1": "–û—á–µ–Ω—å –ø–ª–æ—Ö–æ–µ",
    }
    physical_state = physical_state_map[message.text]
    utc_now = datetime.now(timezone.utc)
    save_log(message.from_user.id, "answer_physical", utc_now, details=physical_state)
    await message.answer(
        f"–°–ø–∞—Å–∏–±–æ! –Ø –∑–∞–ø–∏—Å–∞–ª —Ç–≤–æ—ë —Ñ–∏–∑–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–∫: {physical_state}.\n–•–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É? –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É.",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–ó–∞–ø—Ä–æ—Å–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É")]], resize_keyboard=True
        )
    )
    # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ 1 —á–∞—Å –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞
    scheduler.add_job(
        send_activity_request,
        'date',
        run_date=datetime.now(timezone.utc) + timedelta(hours=1),
        args=[message.from_user.id]
    )

@dp.message(lambda msg: msg.text == "–ó–∞–ø—Ä–æ—Å–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É")
async def request_analytics(message: Message):
    await message.answer(
        "–ö–∞–∫—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å? –í—ã–±–µ—Ä–∏—Ç–µ:",
        reply_markup=analytics_keyboard
    )

@dp.message(lambda msg: msg.text in ["–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ", "–§–∏–∑–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"])
async def send_selected_analytics(message: Message):
    try:
        conn = sqlite3.connect(DB_PATH)
        query = f"SELECT * FROM logs WHERE user_id = {message.from_user.id}"
        logs = pd.read_sql_query(query, conn)
        conn.close()

        logs['timestamp'] = pd.to_datetime(logs['timestamp'])

        if message.text == "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ":
            mood_map = {
                "–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ–µ": 10,
                "–û—á–µ–Ω—å —Ö–æ—Ä–æ—à–µ–µ": 9,
                "–•–æ—Ä–æ—à–µ–µ": 8,
                "–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ": 7,
                "–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ": 6,
                "–°—Ä–µ–¥–Ω–µ–µ": 5,
                "–ü–ª–æ—Ö–æ–µ": 4,
                "–û—á–µ–Ω—å –ø–ª–æ—Ö–æ–µ": 3,
                "–£–∂–∞—Å–Ω–æ–µ": 2,
                "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –ø–ª–æ—Ö–æ–µ": 1,
            }
            df = logs[logs['event_type'] == 'answer_emotional'].copy()
            df['score'] = df['details'].map(mood_map)
            df['hour'] = df['timestamp'].dt.hour
            df['day_type'] = df['timestamp'].dt.weekday.apply(lambda x: '–ë—É–¥–Ω–∏–π –¥–µ–Ω—å' if x < 5 else '–í—ã—Ö–æ–¥–Ω–æ–π')

            point_count = len(df)
            await message.answer(f"–£ –≤–∞—Å —Å–æ–±—Ä–∞–Ω–æ {point_count} —Ç–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è.")

            if df.empty:
                await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é.")
                return

            generate_and_send_charts(BOT_TOKEN, message.chat.id, df, "emotion", logger)

        elif message.text == "–§–∏–∑–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ":
            physical_state_map = {
                "–û—Ç–ª–∏—á–Ω–æ–µ": 5,
                "–•–æ—Ä–æ—à–µ–µ": 4,
                "–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ": 3,
                "–ü–ª–æ—Ö–æ–µ": 2,
                "–û—á–µ–Ω—å –ø–ª–æ—Ö–æ–µ": 1,
            }
            df = logs[logs['event_type'] == 'answer_physical'].copy()
            df['score'] = df['details'].map(physical_state_map)
            df['hour'] = df['timestamp'].dt.hour
            df['day_type'] = df['timestamp'].dt.weekday.apply(lambda x: '–ë—É–¥–Ω–∏–π –¥–µ–Ω—å' if x < 5 else '–í—ã—Ö–æ–¥–Ω–æ–π')

            generate_and_send_charts(BOT_TOKEN, message.chat.id, df, "physical", logger)

    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")

# ----------------------- –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è -----------------------

async def check_pending_requests():
    """
    –ö–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤ –ë–î –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "pending":
    - –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª–µ–µ 1 —á–∞—Å–∞ —Å –º–æ–º–µ–Ω—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞ (–Ω–æ –º–µ–Ω–µ–µ 2 —á–∞—Å–æ–≤) ‚Äì –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.
    - –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª–µ–µ 2 —á–∞—Å–æ–≤ ‚Äì –ø–æ–º–µ—á–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫–∞–∫ –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–π –∏ —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    now = datetime.now(timezone.utc)
    pending_requests = session.query(MoodRequest).filter_by(status="pending").all()
    for req in pending_requests:
        time_diff = now - req.request_time
        if timedelta(hours=1) < time_diff <= timedelta(hours=2):
            await bot.send_message(
                req.user_id,
                "–ù–∞–ø–æ–º–∏–Ω–∞–µ–º: –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –∑–∞–ø—Ä–æ—Å –æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏."
            )
        elif time_diff > timedelta(hours=2):
            mark_request_as_unanswered(req.user_id, req.request_time)
            await bot.send_message(
                req.user_id,
                "–ú—ã –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–ª–∏, —á—Ç–æ –≤—ã –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –∑–∞–ø—Ä–æ—Å –æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏."
            )

# –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
scheduler.add_job(check_pending_requests, 'interval', minutes=10)

# ----------------------- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ -----------------------

async def main():
    scheduler.start()  # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

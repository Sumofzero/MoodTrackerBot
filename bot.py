from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, Message
from config import BOT_TOKEN
from database import save_user, save_log
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import asyncio
from datetime import datetime, timedelta, timezone
from analytics import save_plot_as_image, plot_daily_states, plot_trend, calculate_stats
from aiogram.types import InputFile
import pandas as pd
import sqlite3


# –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
DB_PATH = "/MoodTrackerBot_data/mood_tracker.db"

# –°–æ–∑–¥–∞—ë–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
scheduler = AsyncIOScheduler()

# –¢–∞–π–º–∑–æ–Ω—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫
timezones = ["+1 GMT", "+2 GMT", "+3 GMT", "+4 GMT"]

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å —Ç–∞–π–º–∑–æ–Ω–∞–º–∏
timezone_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text=tz)] for tz in timezones],
    resize_keyboard=True
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
analytics_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ")],
        [KeyboardButton(text="–§–∏–∑–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ")],
    ],
    resize_keyboard=True
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è (10 –∫–Ω–æ–ø–æ–∫ –≤ –¥–≤–∞ —Ä—è–¥–∞)
mood_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text="üòÑ 10"),  # –ü—Ä–µ–∫—Ä–∞—Å–Ω–æ–µ
            KeyboardButton(text="üòä 9"),
            KeyboardButton(text="üôÇ 8"),
            KeyboardButton(text="üòå 7"),
            KeyboardButton(text="üòê 6"),
        ],
        [
            KeyboardButton(text="üòï 5"),  # –°—Ä–µ–¥–Ω–µ–µ
            KeyboardButton(text="üòü 4"),
            KeyboardButton(text="üò¢ 3"),
            KeyboardButton(text="üò≠ 2"),
            KeyboardButton(text="ü§¢ 1"),  # –û—á–µ–Ω—å –ø–ª–æ—Ö–æ–µ
        ],
    ],
    resize_keyboard=True
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è (5 –∫–Ω–æ–ø–æ–∫ –≤ —Ä—è–¥)
physical_state_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text="üí™ 5"),  # –û—Ç–ª–∏—á–Ω–æ–µ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            KeyboardButton(text="üôÇ 4"),  # –•–æ—Ä–æ—à–µ–µ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            KeyboardButton(text="üòê 3"),  # –ù–æ—Ä–º–∞–ª—å–Ω–æ–µ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            KeyboardButton(text="üòü 2"),  # –ü–ª–æ—Ö–æ–µ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            KeyboardButton(text="ü§¢ 1"),  # –û—á–µ–Ω—å –ø–ª–æ—Ö–æ–µ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        ]
    ],
    resize_keyboard=True
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–µ–∫—É—â–µ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
activity_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–†–∞–±–æ—Ç–∞—é / –£—á—É—Å—å")],
        [KeyboardButton(text="–ì—É–ª—è—é")],
        [KeyboardButton(text="–ó–∞–Ω–∏–º–∞—é—Å—å —Å–ø–æ—Ä—Ç–æ–º")],
        [KeyboardButton(text="–û—Ç–¥—ã—Ö–∞—é / –°–º–æ—Ç—Ä—é –≤–∏–¥–µ–æ")],
        [KeyboardButton(text="–ß–∏—Ç–∞—é —Å—Ç–∞—Ç—å—é / –∫–Ω–∏–≥—É")],
        [KeyboardButton(text="–û–±—â–∞—é—Å—å —Å –¥—Ä—É–∑—å—è–º–∏")],
        [KeyboardButton(text="–î—Ä—É–≥–æ–µ")],
    ],
    resize_keyboard=True
)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def start_command(message: Message):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å —Ç–∞–π–º–∑–æ–Ω—É."""
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ç–≤–æ—ë –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ. –í—ã–±–µ—Ä–∏ —Å–≤–æ—é —Ç–∞–π–º–∑–æ–Ω—É:",
        reply_markup=timezone_keyboard,
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∞–π–º–∑–æ–Ω—ã
@dp.message(lambda msg: msg.text in timezones)
async def handle_timezone_selection(message: Message):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ç–∞–π–º–∑–æ–Ω—É –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –æ–ø—Ä–æ—Å—ã."""
    gmt_offset = int(message.text.split(" ")[0])  # –ò–∑–≤–ª–µ–∫–∞–µ–º +1, +2 –∏ —Ç.–¥.
    timezone = f"Etc/GMT{gmt_offset:+d}"  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç —Ç–∞–π–º–∑–æ–Ω—ã
    save_user(message.from_user.id, timezone)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∞–π–º–∑–æ–Ω—É –≤ –±–∞–∑—É

    await message.answer(
        f"–¢–∞–π–º–∑–æ–Ω–∞ {message.text} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! –¢–µ–ø–µ—Ä—å —è –±—É–¥—É —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å —Ç–≤–æ—ë —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–∂–¥—ã–π —á–∞—Å.",
        reply_markup=ReplyKeyboardRemove()
    )

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–ø—Ä–æ—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    await send_activity_request(message.from_user.id)

async def send_activity_request(user_id):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    utc_now = datetime.now(timezone.utc)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–±—ã—Ç–∏–µ `response_activity` –≤ –ª–æ–≥–∏
    save_log(user_id, "response_activity", utc_now)

    await bot.send_message(
        user_id,
        "–ß–µ–º —Ç—ã —Å–µ–π—á–∞—Å –∑–∞–Ω—è—Ç? –í—ã–±–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç:",
        reply_markup=activity_keyboard,
    )

@dp.message(lambda msg: msg.text in [
    "–†–∞–±–æ—Ç–∞—é / –£—á—É—Å—å",
    "–ì—É–ª—è—é",
    "–ó–∞–Ω–∏–º–∞—é—Å—å —Å–ø–æ—Ä—Ç–æ–º",
    "–û—Ç–¥—ã—Ö–∞—é / –°–º–æ—Ç—Ä—é –≤–∏–¥–µ–æ",
    "–ß–∏—Ç–∞—é —Å—Ç–∞—Ç—å—é / –∫–Ω–∏–≥—É",
    "–û–±—â–∞—é—Å—å —Å –¥—Ä—É–∑—å—è–º–∏",
    "–î—Ä—É–≥–æ–µ",
])
async def handle_activity(message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–µ–∫—É—â–µ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""
    activity = message.text
    utc_now = datetime.now(timezone.utc)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –ª–æ–≥–∏
    save_log(message.from_user.id, "answer_activity", utc_now, details=activity)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await bot.send_message(
        message.from_user.id,
        f"–°–ø–∞—Å–∏–±–æ! –Ø –∑–∞–ø–∏—Å–∞–ª —Ç–≤–æ—é —Ç–µ–∫—É—â—É—é –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–∞–∫: {activity}.\n–¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π —É–∑–Ω–∞–µ–º, –∫–∞–∫ —Ç—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ.",
        reply_markup=mood_keyboard,
    )

@dp.message(lambda msg: msg.text in [
    "üòÑ 10", "üòä 9", "üôÇ 8", "üòå 7", "üòê 6",
    "üòï 5", "üòü 4", "üò¢ 3", "üò≠ 2", "ü§¢ 1"
])
async def handle_emotional_state(message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è."""
    mood_map = {
        "üòÑ 10": "–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ–µ",
        "üòä 9": "–û—á–µ–Ω—å —Ö–æ—Ä–æ—à–µ–µ",
        "üôÇ 8": "–•–æ—Ä–æ—à–µ–µ",
        "üòå 7": "–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ",
        "üòê 6": "–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ",
        "üòï 5": "–°—Ä–µ–¥–Ω–µ–µ",
        "üòü 4": "–ü–ª–æ—Ö–æ–µ",
        "üò¢ 3": "–û—á–µ–Ω—å –ø–ª–æ—Ö–æ–µ",
        "üò≠ 2": "–£–∂–∞—Å–Ω–æ–µ",
        "ü§¢ 1": "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –ø–ª–æ—Ö–æ–µ",
    }
    mood = mood_map[message.text]
    utc_now = datetime.now(timezone.utc)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    save_log(message.from_user.id, "answer_emotional", utc_now, details=mood)

    # –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –æ—Ç–≤–µ—Ç
    await message.answer(
        f"–°–ø–∞—Å–∏–±–æ! –Ø –∑–∞–ø–∏—Å–∞–ª —Ç–≤–æ—ë —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–∫: {mood}"
    )

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await send_physical_state_request(message.from_user.id)

async def send_physical_state_request(user_id):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ñ–∏–∑–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    utc_now = datetime.now(timezone.utc)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–±—ã—Ç–∏–µ `response_physical` –≤ –ª–æ–≥–∏
    save_log(user_id, "response_physical", utc_now)

    await bot.send_message(
        user_id,
        "–ö–∞–∫ —Ç—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å —Ñ–∏–∑–∏—á–µ—Å–∫–∏? –í—ã–±–µ—Ä–∏ –æ—Ü–µ–Ω–∫—É:\n"
        "üí™ 5  üôÇ 4  üòê 3  üòü 2  ü§¢ 1",
        reply_markup=physical_state_keyboard,
    )

@dp.message(lambda msg: msg.text in ["üí™ 5", "üôÇ 4", "üòê 3", "üòü 2", "ü§¢ 1"])
async def handle_physical_state(message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è."""
    physical_state_map = {
        "üí™ 5": "–û—Ç–ª–∏—á–Ω–æ–µ",
        "üôÇ 4": "–•–æ—Ä–æ—à–µ–µ",
        "üòê 3": "–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ",
        "üòü 2": "–ü–ª–æ—Ö–æ–µ",
        "ü§¢ 1": "–û—á–µ–Ω—å –ø–ª–æ—Ö–æ–µ",
    }
    physical_state = physical_state_map[message.text]
    utc_now = datetime.now(timezone.utc)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–∑–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    save_log(message.from_user.id, "answer_physical", utc_now, details=physical_state)

    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∑–∞–ø—Ä–æ—Å–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É
    await message.answer(
        f"–°–ø–∞—Å–∏–±–æ! –Ø –∑–∞–ø–∏—Å–∞–ª —Ç–≤–æ—ë —Ñ–∏–∑–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–∫: {physical_state}.\n–•–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É? –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É.",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–ó–∞–ø—Ä–æ—Å–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É")]], resize_keyboard=True
        )
    )

@dp.message(lambda msg: msg.text == "–ó–∞–ø—Ä–æ—Å–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É")
async def request_analytics(message: Message):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ç–∏–ø –∞–Ω–∞–ª–∏—Ç–∏–∫–∏."""
    await message.answer(
        "–ö–∞–∫—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å? –í—ã–±–µ—Ä–∏—Ç–µ:",
        reply_markup=analytics_keyboard
    )

@dp.message(lambda msg: msg.text in ["–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ", "–§–∏–∑–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"])
async def send_selected_analytics(message: Message):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect(DB_PATH)
        query = f"SELECT * FROM logs WHERE user_id = {message.from_user.id}"
        logs = pd.read_sql_query(query, conn)
        conn.close()

        logs['timestamp'] = pd.to_datetime(logs['timestamp'])

        if message.text == "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ":
            mood_map = {
                "–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ–µ": 10,
                "–û—á–µ–Ω—å —Ö–æ—Ä–æ—à–µ–µ": 9,
                "–•–æ—Ä–æ—à–µ–µ": 8,
                "–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ": 7,
                "–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ": 6,
                "–°—Ä–µ–¥–Ω–µ–µ": 5,
                "–ü–ª–æ—Ö–æ–µ": 4,
                "–û—á–µ–Ω—å –ø–ª–æ—Ö–æ–µ": 3,
                "–£–∂–∞—Å–Ω–æ–µ": 2,
                "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –ø–ª–æ—Ö–æ–µ": 1,
            }
            df = logs[logs['event_type'] == 'answer_emotional'].copy()
            df['score'] = df['details'].map(mood_map)
            df['hour'] = df['timestamp'].dt.hour
            df['day_type'] = df['timestamp'].dt.weekday.apply(lambda x: '–ë—É–¥–Ω–∏–π –¥–µ–Ω—å' if x < 5 else '–í—ã—Ö–æ–¥–Ω–æ–π')

            stats = calculate_stats(df)
            save_plot_as_image(plot_daily_states, "daily_states.png", stats, "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ", "–°—Ä–µ–¥–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ")
            save_plot_as_image(plot_trend, "emotion_trend.png", df, "–¢—Ä–µ–Ω–¥ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è", "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ")

            await message.answer("–í–æ—Ç –≤–∞—à–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é:")
            await bot.send_photo(message.chat.id, InputFile("daily_states.png"))
            await bot.send_photo(message.chat.id, InputFile("emotion_trend.png"))

        elif message.text == "–§–∏–∑–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ":
            physical_state_map = {
                "–û—Ç–ª–∏—á–Ω–æ–µ": 5,
                "–•–æ—Ä–æ—à–µ–µ": 4,
                "–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ": 3,
                "–ü–ª–æ—Ö–æ–µ": 2,
                "–û—á–µ–Ω—å –ø–ª–æ—Ö–æ–µ": 1,
            }
            df = logs[logs['event_type'] == 'answer_physical'].copy()
            df['score'] = df['details'].map(physical_state_map)
            df['hour'] = df['timestamp'].dt.hour
            df['day_type'] = df['timestamp'].dt.weekday.apply(lambda x: '–ë—É–¥–Ω–∏–π –¥–µ–Ω—å' if x < 5 else '–í—ã—Ö–æ–¥–Ω–æ–π')

            stats = calculate_stats(df)
            save_plot_as_image(plot_daily_states, "physical_states.png", stats, "–§–∏–∑–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ", "–°—Ä–µ–¥–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ")
            save_plot_as_image(plot_trend, "physical_trend.png", df, "–¢—Ä–µ–Ω–¥ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è", "–§–∏–∑–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ")

            await message.answer("–í–æ—Ç –≤–∞—à–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é:")
            await bot.send_photo(message.chat.id, InputFile("physical_states.png"))
            await bot.send_photo(message.chat.id, InputFile("physical_trend.png"))

    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")


# –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∏ –±–æ—Ç–∞
async def main():
    scheduler.start()  # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
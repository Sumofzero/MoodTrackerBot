from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, Message
from config import BOT_TOKEN
from database import save_user, get_user, save_log, save_mood_request, mark_request_as_answered, get_unanswered_requests
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import asyncio
import pytz
from datetime import datetime, timedelta

# –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –°–æ–∑–¥–∞—ë–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
scheduler = AsyncIOScheduler()

# –¢–∞–π–º–∑–æ–Ω—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫
timezones = ["+1 GMT", "+2 GMT", "+3 GMT", "+4 GMT"]

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å —Ç–∞–π–º–∑–æ–Ω–∞–º–∏
timezone_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text=tz)] for tz in timezones],
    resize_keyboard=True
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è (2x2)
mood_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üòä –û—Ç–ª–∏—á–Ω–æ"), KeyboardButton(text="üôÇ –•–æ—Ä–æ—à–æ")],
        [KeyboardButton(text="üòê –ù–æ—Ä–º–∞–ª—å–Ω–æ"), KeyboardButton(text="üòü –ü–ª–æ—Ö–æ")],
    ],
    resize_keyboard=True
)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def start_command(message: Message):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å —Ç–∞–π–º–∑–æ–Ω—É."""
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ç–≤–æ—ë –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ. –í—ã–±–µ—Ä–∏ —Å–≤–æ—é —Ç–∞–π–º–∑–æ–Ω—É:",
        reply_markup=timezone_keyboard,
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∞–π–º–∑–æ–Ω—ã
@dp.message(lambda msg: msg.text in timezones)
async def handle_timezone_selection(message: Message):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ç–∞–π–º–∑–æ–Ω—É –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤."""
    gmt_offset = int(message.text.split(" ")[0])  # –ò–∑–≤–ª–µ–∫–∞–µ–º +1, +2 –∏ —Ç.–¥.
    timezone = f"Etc/GMT{gmt_offset:+d}"  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç —Ç–∞–π–º–∑–æ–Ω—ã
    save_user(message.from_user.id, timezone)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∞–π–º–∑–æ–Ω—É –≤ –±–∞–∑—É

    # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É, –µ—Å–ª–∏ –æ–Ω–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    job_id = f"mood_request_{message.from_user.id}"
    scheduler.remove_job(job_id) if scheduler.get_job(job_id) else None

    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É —Å —É—á—ë—Ç–æ–º —Ç–∞–π–º–∑–æ–Ω—ã
    scheduler.add_job(
        send_mood_request,
        "interval",
        hours=2,  # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞
        args=[message.from_user.id],
        id=job_id,
        timezone=pytz.timezone(timezone),
    )

    await message.answer(
        f"–¢–∞–π–º–∑–æ–Ω–∞ {message.text} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! –¢–µ–ø–µ—Ä—å —è –±—É–¥—É —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å —Ç–≤–æ—ë –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞.",
        reply_markup=mood_keyboard,  # –ü–æ–∫–∞–∑–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
    )

async def send_mood_request(user_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –æ—Ç–≤–µ—Ç–∞."""
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        request_time = datetime.utcnow()
        save_mood_request(user_id)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await bot.send_message(
            user_id,
            "–ö–∞–∫ —Ç—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å?\n"
            "üòä –û—Ç–ª–∏—á–Ω–æ   üôÇ –•–æ—Ä–æ—à–æ\n"
            "üòê –ù–æ—Ä–º–∞–ª—å–Ω–æ üòü –ü–ª–æ—Ö–æ",
            reply_markup=mood_keyboard,
        )

        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç—É
        scheduler.add_job(
            check_for_response,
            "date",
            run_date=request_time + timedelta(minutes=5),
            args=[user_id, request_time],
            id=f"check_response_{user_id}_{request_time.timestamp()}",
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

async def check_for_response(user_id, request_time):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ—Ç–≤–µ—Ç–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –∑–∞–ø—Ä–æ—Å."""
    unanswered_requests = get_unanswered_requests(user_id)
    for req in unanswered_requests:
        if req.request_time == request_time:
            # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (–Ω–æ –Ω–µ –¥—É–±–ª–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è)
            await bot.send_message(user_id, "–ù–µ–ª—å–∑—è –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö!")
            break  # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
@dp.message(lambda msg: msg.text in ["üòä –û—Ç–ª–∏—á–Ω–æ", "üôÇ –•–æ—Ä–æ—à–æ", "üòê –ù–æ—Ä–º–∞–ª—å–Ω–æ", "üòü –ü–ª–æ—Ö–æ"])
async def handle_mood(message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è."""
    mood_map = {
        "üòä –û—Ç–ª–∏—á–Ω–æ": "–û—Ç–ª–∏—á–Ω–æ",
        "üôÇ –•–æ—Ä–æ—à–æ": "–•–æ—Ä–æ—à–æ",
        "üòê –ù–æ—Ä–º–∞–ª—å–Ω–æ": "–ù–æ—Ä–º–∞–ª—å–Ω–æ",
        "üòü –ü–ª–æ—Ö–æ": "–ü–ª–æ—Ö–æ",
    }
    mood = mood_map[message.text]

    # –û—Ç–º–µ—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∫–∞–∫ –æ—Ç–≤–µ—á–µ–Ω–Ω—ã–π
    mark_request_as_answered(message.from_user.id)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥ —Å –≤—Ä–µ–º–µ–Ω–µ–º –æ—Ç–≤–µ—Ç–∞
    save_log(message.from_user.id, mood, datetime.utcnow(), datetime.utcnow())

    # –ü–µ—Ä–µ–Ω–æ—Å–∏–º —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å –Ω–∞ 2 —á–∞—Å–∞ –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞
    job_id = f"mood_request_{message.from_user.id}"
    scheduler.reschedule_job(job_id, trigger="date", run_date=datetime.utcnow() + timedelta(hours=2))

    await message.answer(
        f"–°–ø–∞—Å–∏–±–æ! –Ø –∑–∞–ø–∏—Å–∞–ª: {mood}",
        reply_markup=ReplyKeyboardRemove()  # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    )

# –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∏ –±–æ—Ç–∞
async def main():
    scheduler.start()  # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

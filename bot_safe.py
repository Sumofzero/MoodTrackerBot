import asyncio
import logging
import sqlite3
from datetime import datetime, timedelta, timezone

from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, Message
)

from config import BOT_TOKEN, DB_PATH, LOG_LEVEL
from database_safe import (
    save_user, save_log,
    save_activity_and_create_mood_request,
    save_emotion_and_update_request,
    mark_request_as_unanswered,
    get_pending_requests,
    get_last_event,
    get_user_activities,
    EventData, MoodRequestData, UserSettingsData,
    get_user_settings, update_user_settings, should_send_survey
)
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import pandas as pd
from analytics_safe import (
    generate_and_send_charts, generate_and_send_correlation_analysis, should_generate_correlation_analysis,
    generate_and_send_new_charts, should_generate_new_charts,
    generate_smart_insights, should_generate_smart_insights
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=getattr(logging, LOG_LEVEL.upper()),
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
scheduler = AsyncIOScheduler()

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à Telegram ID)
ADMIN_USER_ID = 331482026  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID

# --------- runtime state ---------
# Users who invoked /start and should always receive first survey right after choosing TZ
_force_first_survey: set[int] = set()
# Users who came from settings (should go to main menu after timezone selection, not survey)
_from_settings: set[int] = set()

# ======================== REPLY –ö–õ–ê–í–ò–ê–¢–£–†–´ ========================

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def get_main_menu():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞")],
            [KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")],
            [KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ç–∞–π–º–∑–æ–Ω—ã
def get_timezone_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="+1 GMT"), KeyboardButton(text="+2 GMT")],
            [KeyboardButton(text="+3 GMT"), KeyboardButton(text="+4 GMT")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
def get_activity_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            # –†–∞–±–æ—Ç–∞ –∏ –æ–±—É—á–µ–Ω–∏–µ
            [KeyboardButton(text="üíº –†–∞–±–æ—Ç–∞—é / –£—á—É—Å—å"), KeyboardButton(text="üìö –ß–∏—Ç–∞—é —Å—Ç–∞—Ç—å—é / –∫–Ω–∏–≥—É")],
            # –§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å  
            [KeyboardButton(text="üèÉ –ó–∞–Ω–∏–º–∞—é—Å—å —Å–ø–æ—Ä—Ç–æ–º"), KeyboardButton(text="üö∂ –ì—É–ª—è—é")],
            # –û—Ç–¥—ã—Ö –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è
            [KeyboardButton(text="üì∫ –û—Ç–¥—ã—Ö–∞—é / –°–º–æ—Ç—Ä—é –≤–∏–¥–µ–æ"), KeyboardButton(text="üë• –û–±—â–∞—é—Å—å —Å –¥—Ä—É–∑—å—è–º–∏")],
            # –î—Ä—É–≥–æ–µ
            [KeyboardButton(text="üéØ –î—Ä—É–≥–æ–µ")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

# –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
def get_mood_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞: —Ö–æ—Ä–æ—à–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è (10-6) - —Å–ª–µ–≤–∞ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –ø—Ä–∞–≤—à–µ–π
            [KeyboardButton(text="üî• 10"), KeyboardButton(text="üòé 9"), KeyboardButton(text="üíÖ 8"), KeyboardButton(text="üôÉ 7"), KeyboardButton(text="ü§ó 6")],
            # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞: –ø–ª–æ—Ö–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è (5-1) 
            [KeyboardButton(text="ü§î 5"), KeyboardButton(text="üôÑ 4"), KeyboardButton(text="üò© 3"), KeyboardButton(text="üíî 2"), KeyboardButton(text="üíÄ 1")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

# –§–∏–∑–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
def get_physical_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üöÄ 5"), KeyboardButton(text="üíØ 4"), KeyboardButton(text="ü§∑‚Äç‚ôÇÔ∏è 3"), KeyboardButton(text="ü•¥ 2"), KeyboardButton(text="‚ò†Ô∏è 1")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

# –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞

# ======================== –ö–û–ù–°–¢–ê–ù–¢–´ ========================

# –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞–π–º–∑–æ–Ω—ã
timezones = ["+1 GMT", "+2 GMT", "+3 GMT", "+4 GMT"]

# –ú–∞–ø–∏–Ω–≥–∏ –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
ACTIVITY_MAP = {
    "üíº –†–∞–±–æ—Ç–∞—é / –£—á—É—Å—å": "–†–∞–±–æ—Ç–∞—é / –£—á—É—Å—å",
    "üö∂ –ì—É–ª—è—é": "–ì—É–ª—è—é",
    "üèÉ –ó–∞–Ω–∏–º–∞—é—Å—å —Å–ø–æ—Ä—Ç–æ–º": "–ó–∞–Ω–∏–º–∞—é—Å—å —Å–ø–æ—Ä—Ç–æ–º", 
    "üì∫ –û—Ç–¥—ã—Ö–∞—é / –°–º–æ—Ç—Ä—é –≤–∏–¥–µ–æ": "–û—Ç–¥—ã—Ö–∞—é / –°–º–æ—Ç—Ä—é –≤–∏–¥–µ–æ",
    "üìö –ß–∏—Ç–∞—é —Å—Ç–∞—Ç—å—é / –∫–Ω–∏–≥—É": "–ß–∏—Ç–∞—é —Å—Ç–∞—Ç—å—é / –∫–Ω–∏–≥—É",
    "üë• –û–±—â–∞—é—Å—å —Å –¥—Ä—É–∑—å—è–º–∏": "–û–±—â–∞—é—Å—å —Å –¥—Ä—É–∑—å—è–º–∏",
    "üéØ –î—Ä—É–≥–æ–µ": "–î—Ä—É–≥–æ–µ"
}

MOOD_MAP = {
    "üî• 10": "–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ–µ",
    "üòé 9": "–û—á–µ–Ω—å —Ö–æ—Ä–æ—à–µ–µ",
    "üíÖ 8": "–•–æ—Ä–æ—à–µ–µ",
    "üôÉ 7": "–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ",
    "ü§ó 6": "–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ",
    "ü§î 5": "–°—Ä–µ–¥–Ω–µ–µ",
    "üôÑ 4": "–ü–ª–æ—Ö–æ–µ",
    "üò© 3": "–û—á–µ–Ω—å –ø–ª–æ—Ö–æ–µ",
    "üíî 2": "–£–∂–∞—Å–Ω–æ–µ", 
    "üíÄ 1": "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –ø–ª–æ—Ö–æ–µ",
}

PHYSICAL_STATE_MAP = {
    "üöÄ 5": "–û—Ç–ª–∏—á–Ω–æ–µ",
    "üíØ 4": "–•–æ—Ä–æ—à–µ–µ",
    "ü§∑‚Äç‚ôÇÔ∏è 3": "–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ",
    "ü•¥ 2": "–ü–ª–æ—Ö–æ–µ", 
    "‚ò†Ô∏è 1": "–û—á–µ–Ω—å –ø–ª–æ—Ö–æ–µ",
}

# –ú–∞–ø–∏–Ω–≥–∏ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
MOOD_SCORE_MAP = {
    "–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ–µ": 10, "–û—á–µ–Ω—å —Ö–æ—Ä–æ—à–µ–µ": 9, "–•–æ—Ä–æ—à–µ–µ": 8,
    "–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ": 7, "–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ": 6, "–°—Ä–µ–¥–Ω–µ–µ": 5,
    "–ü–ª–æ—Ö–æ–µ": 4, "–û—á–µ–Ω—å –ø–ª–æ—Ö–æ–µ": 3, "–£–∂–∞—Å–Ω–æ–µ": 2, "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –ø–ª–æ—Ö–æ–µ": 1
}

PHYSICAL_SCORE_MAP = {
    "–û—Ç–ª–∏—á–Ω–æ–µ": 5, "–•–æ—Ä–æ—à–µ–µ": 4, "–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ": 3, 
    "–ü–ª–æ—Ö–æ–µ": 2, "–û—á–µ–Ω—å –ø–ª–æ—Ö–æ–µ": 1
}

# ======================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ========================

@dp.message(Command("start"))
async def start_command(message: Message):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –≤—ã–±–æ—Ä —Ç–∞–π–º–∑–æ–Ω—ã."""
    # –ü–æ–º–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ç–∞–π–º–∑–æ–Ω—ã —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–ø—Ä–æ—Å
    _force_first_survey.add(message.from_user.id)
    await message.answer(
        "ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ç–≤–æ—ë –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ.\n\n"
        "üåç –î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Å–≤–æ—é —Ç–∞–π–º–∑–æ–Ω—É:",
        reply_markup=get_timezone_keyboard(),
    )

@dp.message(Command("menu"))
async def menu_command(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    await message.answer(
        "üì± –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:\n\n"
        "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ - –ø—Ä–æ—Å–º–æ—Ç—Ä –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n"
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ - –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–∞–π–º–∑–æ–Ω—ã –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫\n"
        "‚ÑπÔ∏è –ü–æ–º–æ—â—å - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ—É–Ω–∫—Ü–∏—è—Ö –±–æ—Ç–∞",
        reply_markup=get_main_menu()
    )

@dp.message(Command("help"))
async def help_command(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É."""
    help_text = (
        "‚ÑπÔ∏è –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:\n\n"
        "üïê –ö–∞–∂–¥—ã–π —á–∞—Å —è –±—É–¥—É —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å:\n"
        "‚Ä¢ –ß—Ç–æ —Ç—ã –¥–µ–ª–∞–µ—à—å —Å–µ–π—á–∞—Å\n"
        "‚Ä¢ –¢–≤–æ—ë —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (1-10)\n"
        "‚Ä¢ –¢–≤–æ—ë —Ñ–∏–∑–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (1-5)\n\n"
        "üìä –ö–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äì –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∏ –≤—ã–±–æ—Ä —Ç–∞–π–º–∑–æ–Ω—ã\n"
        "/menu ‚Äì –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/help ‚Äì —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
        "üì± –î–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é."
    )
    await message.answer(help_text)

@dp.message(Command("restore_backup"))
async def restore_backup_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    if message.from_user.id != ADMIN_USER_ID:
        return
    
    await message.answer("üîÑ –ù–∞—á–∏–Ω–∞—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±—ç–∫–∞–ø–∞ –æ—Ç 27 –∏—é–Ω—è...")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        import sys
        import csv
        from pathlib import Path
        
        # –í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
        async def restore_backup_simple():
            backup_dir = Path(__file__).parent / "backups" / "20250627_201421"
            csv_path = backup_dir / "logs.csv"
            
            if not csv_path.exists():
                return False, "–§–∞–π–ª –±—ç–∫–∞–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω"
            
            restored_count = 0
            try:
                with open(csv_path, 'r', encoding='utf-8') as f:
                    reader = csv.DictReader(f)
                    for row in reader:
                        user_id = int(row['user_id'])
                        event_type = row['event_type']
                        timestamp_str = row['timestamp']
                        details = row['details'] if row['details'] else None
                        
                        try:
                            timestamp = datetime.fromisoformat(timestamp_str.replace('Z', '+00:00'))
                        except ValueError:
                            timestamp = datetime.fromisoformat(timestamp_str)
                        
                        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥
                        save_user(user_id, timezone=None)
                        success = save_log(user_id, event_type, timestamp, details)
                        if success:
                            restored_count += 1
                            
                return True, f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {restored_count} –∑–∞–ø–∏—Å–µ–π"
            except Exception as e:
                return False, str(e)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
        success, result_message = await restore_backup_simple()
        
        if success:
            await message.answer(
                f"‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!\n\n"
                f"üìä {result_message}\n\n"
                f"üéâ –í—Å–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã!\n"
                f"üìà –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–Ω–∞–ª–∏—Ç–∏–∫—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
            )
        else:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {result_message}")
            
    except Exception as e:
        logger.error(f"Restore backup error: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {str(e)}")

# ======================== REPLY MESSAGE –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ========================

@dp.message(lambda msg: msg.text in timezones)
async def handle_timezone_selection(message: Message):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ç–∞–π–º–∑–æ–Ω—É –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –æ–ø—Ä–æ—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏–ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    gmt_offset = int(message.text.split(" ")[0])
    tz_str = f"Etc/GMT{gmt_offset:+d}"
    
    success = save_user(message.from_user.id, tz_str)
    if success:
        await message.answer(
            f"–¢–∞–π–º–∑–æ–Ω–∞ {message.text} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!",
            reply_markup=ReplyKeyboardRemove()
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç: –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–ª–∏ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
        from_settings = message.from_user.id in _from_settings
        from_start = message.from_user.id in _force_first_survey
        
        # –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥–∏
        _from_settings.discard(message.from_user.id)
        _force_first_survey.discard(message.from_user.id)
        
        if from_settings:
            # –ü—Ä–∏—à–ª–∏ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ - –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –æ–ø—Ä–æ—Å –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ–º
            await main_menu_handler(message)
        elif from_start:
            # –ü—Ä–∏—à–ª–∏ –∏–∑ /start - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ä–æ—Å
            await send_activity_request(message.from_user.id)
        else:
            # –î—Ä—É–≥–∏–µ —Å–ª—É—á–∞–∏ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–µ–Ω –ª–∏ –æ–ø—Ä–æ—Å
            last_ev = get_last_event(message.from_user.id)
            if last_ev is None:
                # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∑–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ä–æ—Å
                await send_activity_request(message.from_user.id)
            elif should_send_survey(message.from_user.id, last_ev.timestamp.replace(tzinfo=timezone.utc)):
                # –î–∞–≤–Ω–æ –Ω–µ –±—ã–ª–æ –æ–ø—Ä–æ—Å–∞ - –∑–∞–ø—É—Å–∫–∞–µ–º
                await send_activity_request(message.from_user.id)
            else:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                await main_menu_handler(message)
    else:
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

async def send_activity_request(user_id):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –æ —Ç–µ–∫—É—â–µ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –ª–æ–≥–µ.
    –≠—Ç–æ –Ω–∞—á–∞–ª–æ –Ω–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞ –∑–∞–ø—Ä–æ—Å–∞.
    """
    utc_now = datetime.now(timezone.utc)
    success = save_log(user_id, "response_activity", utc_now)
    if not success:
        logger.error(f"Failed to log activity request for user {user_id}")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    
    await bot.send_message(
        user_id,
        "üéØ –ß–µ–º —Ç—ã —Å–µ–π—á–∞—Å –∑–∞–Ω—è—Ç?\n\n–í—ã–±–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç:",
        reply_markup=get_activity_keyboard(),
    )

@dp.message(lambda msg: msg.text in [
    "üíº –†–∞–±–æ—Ç–∞—é / –£—á—É—Å—å",
    "üö∂ –ì—É–ª—è—é",
    "üèÉ –ó–∞–Ω–∏–º–∞—é—Å—å —Å–ø–æ—Ä—Ç–æ–º",
    "üì∫ –û—Ç–¥—ã—Ö–∞—é / –°–º–æ—Ç—Ä—é –≤–∏–¥–µ–æ",
    "üìö –ß–∏—Ç–∞—é —Å—Ç–∞—Ç—å—é / –∫–Ω–∏–≥—É",
    "üë• –û–±—â–∞—é—Å—å —Å –¥—Ä—É–∑—å—è–º–∏",
    "üéØ –î—Ä—É–≥–æ–µ",
    # –°—Ç–∞—Ä—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    "–†–∞–±–æ—Ç–∞—é / –£—á—É—Å—å",
    "–ì—É–ª—è—é",
    "–ó–∞–Ω–∏–º–∞—é—Å—å —Å–ø–æ—Ä—Ç–æ–º",
    "–û—Ç–¥—ã—Ö–∞—é / –°–º–æ—Ç—Ä—é –≤–∏–¥–µ–æ",
    "–ß–∏—Ç–∞—é —Å—Ç–∞—Ç—å—é / –∫–Ω–∏–≥—É",
    "–û–±—â–∞—é—Å—å —Å –¥—Ä—É–∑—å—è–º–∏",
    "–î—Ä—É–≥–æ–µ",
])
async def handle_activity(message: Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–µ–∫—É—â–µ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.
    –ê—Ç–æ–º–∞—Ä–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ —Å–æ–∑–¥–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è.
    """
    # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É
    activity = ACTIVITY_MAP.get(message.text, message.text)
    utc_now = datetime.now(timezone.utc)
    
    # –ê—Ç–æ–º–∞—Ä–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ + —Å–æ–∑–¥–∞–Ω–∏–µ mood request
    activity_saved, mood_request_created = save_activity_and_create_mood_request(
        message.from_user.id, activity, utc_now
    )
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
    
    if activity_saved and mood_request_created:
        await bot.send_message(
            message.from_user.id,
            f"‚úÖ –ó–∞–ø–∏—Å–∞–ª: {activity}\n\nüòä –¢–µ–ø–µ—Ä—å –æ—Ü–µ–Ω–∏ —Å–≤–æ—ë —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:",
            reply_markup=get_mood_keyboard(),
        )
    elif activity_saved:
        await bot.send_message(
            message.from_user.id,
            f"‚úÖ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∞–Ω–∞: {activity}\n\nüòä –û—Ü–µ–Ω–∏ —Å–≤–æ—ë —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:",
            reply_markup=get_mood_keyboard(),
        )
        logger.warning(f"Activity saved but mood request failed for user {message.from_user.id}")
    else:
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É."
        )
        logger.error(f"Failed to save activity for user {message.from_user.id}")

@dp.message(lambda msg: msg.text in [
    "üî• 10", "üòé 9", "üíÖ 8", "üôÉ 7", "ü§ó 6",
    "ü§î 5", "üôÑ 4", "üò© 3", "üíî 2", "üíÄ 1"
])
async def handle_emotional_state(message: Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è.
    –ê—Ç–æ–º–∞—Ä–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —ç–º–æ—Ü–∏—é –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç mood request.
    """
    mood = MOOD_MAP[message.text]
    utc_now = datetime.now(timezone.utc)
    
    # –ê—Ç–æ–º–∞—Ä–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —ç–º–æ—Ü–∏–∏ + –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ mood request
    emotion_saved, request_updated = save_emotion_and_update_request(
        message.from_user.id, mood, utc_now
    )
    
    if emotion_saved:
        await message.answer(f"–°–ø–∞—Å–∏–±–æ! –Ø –∑–∞–ø–∏—Å–∞–ª —Ç–≤–æ—ë —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–∫: {mood}")
        if not request_updated:
            logger.warning(f"Emotion saved but request update failed for user {message.from_user.id}")
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        await send_physical_state_request(message.from_user.id)
    else:
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
        )
        logger.error(f"Failed to save emotion for user {message.from_user.id}")

async def send_physical_state_request(user_id):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –æ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏.
    """
    utc_now = datetime.now(timezone.utc)
    success = save_log(user_id, "response_physical", utc_now)
    if not success:
        logger.error(f"Failed to log physical request for user {user_id}")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await bot.send_message(
        user_id,
        "üí™ –ö–∞–∫ —Ç—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å —Ñ–∏–∑–∏—á–µ—Å–∫–∏?\n\n–í—ã–±–µ—Ä–∏ –æ—Ü–µ–Ω–∫—É:",
        reply_markup=get_physical_keyboard(),
    )

@dp.message(lambda msg: msg.text in ["üöÄ 5", "üíØ 4", "ü§∑‚Äç‚ôÇÔ∏è 3", "ü•¥ 2", "‚ò†Ô∏è 1"])
async def handle_physical_state(message: Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è.
    –ü–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π —Ü–∏–∫–ª –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ 1 —á–∞—Å.
    """
    physical_state = PHYSICAL_STATE_MAP[message.text]
    utc_now = datetime.now(timezone.utc)
    
    success = save_log(message.from_user.id, "answer_physical", utc_now, details=physical_state)
    if success:
        # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ü–∏–∫–ª–∞
        completion_keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞")],
                [KeyboardButton(text="üì± –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
            ],
            resize_keyboard=True,
            one_time_keyboard=False  # –æ—Å—Ç–∞—ë—Ç—Å—è –≤–∏–¥–∏–º—ã–º
        )
        await message.answer(
            f"üí™ –§–∏–∑–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {physical_state}\n\n"
            f"‚úÖ –°–ø–∞—Å–∏–±–æ! –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã.\n"
            f"üìä –•–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É?",
            reply_markup=completion_keyboard
        )
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        settings = get_user_settings(message.from_user.id)
        if settings:
            next_survey_time = datetime.now(timezone.utc) + timedelta(minutes=settings.survey_interval)
            scheduler.add_job(
                send_activity_request,
                'date',
                run_date=next_survey_time,
                args=[message.from_user.id]
            )
        else:
            # Fallback: –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º 1 —á–∞—Å
            scheduler.add_job(
                send_activity_request,
                'date',
                run_date=datetime.now(timezone.utc) + timedelta(hours=1),
                args=[message.from_user.id]
            )
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await main_menu_handler(message)
    else:
        await message.answer(
            "–§–∏–∑–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ –∑–∞–ø–∏—Å–∞–ª–æ—Å—å. –î–∞–Ω–Ω—ã–µ –æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã."
        )
        logger.error(f"Failed to save physical state for user {message.from_user.id}")

@dp.message(lambda msg: msg.text in ["–ó–∞–ø—Ä–æ—Å–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É", "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞"])
async def request_analytics(message: Message):
    analytics_reply_keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üí≠ –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ")],
            [KeyboardButton(text="üí™ –§–∏–∑–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ")],
            [KeyboardButton(text="üîó –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑")],
            [KeyboardButton(text="üìä –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞")],
            [KeyboardButton(text="üß† –£–º–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã")],
            [KeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True,
        one_time_keyboard=False  # –ù–µ —Å–∫—Ä—ã–≤–∞—Ç—å –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞, —É–¥–æ–±–Ω–µ–µ
    )
    await message.answer(
        "üìä –ö–∞–∫—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É —Ö–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å?",
        reply_markup=analytics_reply_keyboard
    )

@dp.message(lambda msg: msg.text == "üì± –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def main_menu_handler(message: Message):
    await message.answer(
        "üì± –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:\n\n"
        "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ - –ø—Ä–æ—Å–º–æ—Ç—Ä –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n"
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ - –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫\n"
        "‚ÑπÔ∏è –ü–æ–º–æ—â—å - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é",
        reply_markup=get_main_menu()
    )

@dp.message(lambda msg: msg.text == "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_to_main_menu(message: Message):
    await main_menu_handler(message)

@dp.message(lambda msg: msg.text in ["–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ", "–§–∏–∑–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ", "üí≠ –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ", "üí™ –§–∏–∑–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ", "üîó –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑", "üìä –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞", "üß† –£–º–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã"])
async def send_selected_analytics(message: Message):
    try:
        conn = sqlite3.connect(DB_PATH)
        # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π SQL-–∑–∞–ø—Ä–æ—Å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        query = "SELECT * FROM logs WHERE user_id = ?"
        logs = pd.read_sql_query(query, conn, params=[message.from_user.id])
        conn.close()

        logs['timestamp'] = pd.to_datetime(logs['timestamp'])

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É —Ç–µ–∫—Å—Ç–∞ (—É—á–∏—Ç—ã–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å —ç–º–æ–¥–∑–∏)
        text_lower = message.text.lower()

        if "—ç–º–æ—Ü–∏–æ–Ω" in text_lower:
            df = logs[logs['event_type'] == 'answer_emotional'].copy()
            df['score'] = df['details'].map(MOOD_SCORE_MAP)
            df['hour'] = df['timestamp'].dt.hour
            df['day_type'] = df['timestamp'].dt.weekday.apply(lambda x: '–ë—É–¥–Ω–∏–π –¥–µ–Ω—å' if x < 5 else '–í—ã—Ö–æ–¥–Ω–æ–π')

            point_count = len(df)
            await message.answer(f"–£ –≤–∞—Å —Å–æ–±—Ä–∞–Ω–æ {point_count} —Ç–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è.")

            if df.empty:
                await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é.")
                return

            generate_and_send_charts(BOT_TOKEN, message.chat.id, df, "emotion", logger)

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤
            await main_menu_handler(message)

        elif "—Ñ–∏–∑–∏—á–µ—Å" in text_lower:
            df = logs[logs['event_type'] == 'answer_physical'].copy()
            df['score'] = df['details'].map(PHYSICAL_SCORE_MAP)
            df['hour'] = df['timestamp'].dt.hour
            df['day_type'] = df['timestamp'].dt.weekday.apply(lambda x: '–ë—É–¥–Ω–∏–π –¥–µ–Ω—å' if x < 5 else '–í—ã—Ö–æ–¥–Ω–æ–π')

            point_count = len(df)
            await message.answer(f"–£ –≤–∞—Å —Å–æ–±—Ä–∞–Ω–æ {point_count} —Ç–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è.")

            if df.empty:
                await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é.")
                return

            generate_and_send_charts(BOT_TOKEN, message.chat.id, df, "physical", logger)

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤
            await main_menu_handler(message)

        elif "–∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω" in text_lower:
            # –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
            await message.answer("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –º–µ–∂–¥—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è–º–∏ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏...")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            df_emotion = logs[logs['event_type'] == 'answer_emotional'].copy()
            df_physical = logs[logs['event_type'] == 'answer_physical'].copy()
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            activities_data = get_user_activities(message.from_user.id)
            if activities_data:
                df_activities = pd.DataFrame(activities_data)
                df_activities['timestamp'] = pd.to_datetime(df_activities['timestamp'])
            else:
                df_activities = pd.DataFrame()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –¥–∞–Ω–Ω—ã—Ö
            if should_generate_correlation_analysis(df_emotion, df_physical, df_activities):
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                if not df_emotion.empty:
                    mood_map = {
                        "–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ–µ": 10, "–û—á–µ–Ω—å —Ö–æ—Ä–æ—à–µ–µ": 9, "–•–æ—Ä–æ—à–µ–µ": 8,
                        "–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ": 7, "–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ": 6, "–°—Ä–µ–¥–Ω–µ–µ": 5,
                        "–ü–ª–æ—Ö–æ–µ": 4, "–û—á–µ–Ω—å –ø–ª–æ—Ö–æ–µ": 3, "–£–∂–∞—Å–Ω–æ–µ": 2, "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –ø–ª–æ—Ö–æ–µ": 1
                    }
                    df_emotion['score'] = df_emotion['details'].map(mood_map)
                
                if not df_physical.empty:
                    physical_map = {
                        "–û—Ç–ª–∏—á–Ω–æ–µ": 5, "–•–æ—Ä–æ—à–µ–µ": 4, "–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ": 3, 
                        "–ü–ª–æ—Ö–æ–µ": 2, "–û—á–µ–Ω—å –ø–ª–æ—Ö–æ–µ": 1
                    }
                    df_physical['score'] = df_physical['details'].map(physical_map)
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
                generate_and_send_correlation_analysis(
                    BOT_TOKEN, message.chat.id, df_emotion, df_physical, df_activities, logger
                )
                
                await message.answer("‚úÖ –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
            else:
                await message.answer(
                    "üìä –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.\n\n"
                    "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –º–∏–Ω–∏–º—É–º:\n"
                    "‚Ä¢ 5 –∑–∞–ø–∏—Å–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π\n"
                    "‚Ä¢ 5 –∑–∞–ø–∏—Å–µ–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è\n"
                    "‚Ä¢ 3 –∑–∞–ø–∏—Å–∏ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è\n\n"
                    "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∑–∞–ø–æ–ª–Ω—è—Ç—å –¥–Ω–µ–≤–Ω–∏–∫!"
                )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞
            await main_menu_handler(message)
            
        elif "—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è" in text_lower:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
            extended_analytics_reply_keyboard = ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="üî• –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞")],
                    [KeyboardButton(text="üìà –¢—Ä–µ–Ω–¥—ã –ø–æ –Ω–µ–¥–µ–ª—è–º")],
                    [KeyboardButton(text="üìä –¢—Ä–µ–Ω–¥—ã –ø–æ –º–µ—Å—è—Ü–∞–º")],
                    [KeyboardButton(text="‚öñÔ∏è –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–æ–≤")],
                    [KeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ")]
                ],
                resize_keyboard=True,
                one_time_keyboard=False
            )
            await message.answer(
                "üìä –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞:\n\n"
                "üî• –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ - –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏ –∏ —á–∞—Å–∞–º\n"
                "üìà –¢—Ä–µ–Ω–¥—ã –ø–æ –Ω–µ–¥–µ–ª—è–º - –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞\n"
                "üìä –¢—Ä–µ–Ω–¥—ã –ø–æ –º–µ—Å—è—Ü–∞–º - –º–µ—Å—è—á–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞\n"
                "‚öñÔ∏è –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–æ–≤ - —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ—Ç—Ä–µ–∑–∫–æ–≤",
                reply_markup=extended_analytics_reply_keyboard
            )
            
        elif "—É–º–Ω—ã–µ" in text_lower or "–∏–Ω—Å–∞–π—Ç—ã" in text_lower:
            # –£–º–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã - –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
            await message.answer("üß† –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ—Å—Ç–∞–≤–ª—è—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã...")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            df_emotion = logs[logs['event_type'] == 'answer_emotional'].copy()
            df_physical = logs[logs['event_type'] == 'answer_physical'].copy()
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            activities_data = get_user_activities(message.from_user.id)
            if activities_data:
                df_activities = pd.DataFrame(activities_data)
                df_activities['timestamp'] = pd.to_datetime(df_activities['timestamp'])
            else:
                df_activities = pd.DataFrame()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–Ω—Å–∞–π—Ç–æ–≤
            if should_generate_smart_insights(df_emotion, df_physical, df_activities):
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                if not df_emotion.empty:
                    mood_map = {
                        "–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ–µ": 10, "–û—á–µ–Ω—å —Ö–æ—Ä–æ—à–µ–µ": 9, "–•–æ—Ä–æ—à–µ–µ": 8,
                        "–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ": 7, "–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ": 6, "–°—Ä–µ–¥–Ω–µ–µ": 5,
                        "–ü–ª–æ—Ö–æ–µ": 4, "–û—á–µ–Ω—å –ø–ª–æ—Ö–æ–µ": 3, "–£–∂–∞—Å–Ω–æ–µ": 2, "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –ø–ª–æ—Ö–æ–µ": 1
                    }
                    df_emotion['score'] = df_emotion['details'].map(mood_map)
                
                if not df_physical.empty:
                    physical_map = {
                        "–û—Ç–ª–∏—á–Ω–æ–µ": 5, "–•–æ—Ä–æ—à–µ–µ": 4, "–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ": 3, 
                        "–ü–ª–æ—Ö–æ–µ": 2, "–û—á–µ–Ω—å –ø–ª–æ—Ö–æ–µ": 1
                    }
                    df_physical['score'] = df_physical['details'].map(physical_map)
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–º–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã
                insights_text = generate_smart_insights(df_emotion, df_physical, df_activities)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å–∞–π—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await message.answer(
                    f"üß† –í–ê–®–ò –ü–ï–†–°–û–ù–ê–õ–¨–ù–´–ï –ò–ù–°–ê–ô–¢–´\n\n{insights_text}",
                    reply_markup=ReplyKeyboardMarkup(
                        keyboard=[[KeyboardButton(text="üì± –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]],
                        resize_keyboard=True,
                        one_time_keyboard=False
                    )
                )
                
            else:
                await message.answer(
                    "üß† –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–º–Ω—ã—Ö –∏–Ω—Å–∞–π—Ç–æ–≤.\n\n"
                    "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –º–∏–Ω–∏–º—É–º 5 –∑–∞–ø–∏—Å–µ–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è.\n"
                    "–£ –≤–∞—Å –ø–æ–∫–∞: {} –∑–∞–ø–∏—Å–µ–π.\n\n"
                    "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∑–∞–ø–æ–ª–Ω—è—Ç—å –¥–Ω–µ–≤–Ω–∏–∫!".format(len(df_emotion))
                )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞
            await main_menu_handler(message)

    except Exception as e:
        logger.error(f"Analytics generation error: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message(lambda msg: msg.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def settings_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ù–∞—Å—Ç—Ä–æ–π–∫–∏: –º–µ–Ω—é —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
    settings_keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üåç –ò–∑–º–µ–Ω–∏—Ç—å —Ç–∞–π–º–∑–æ–Ω—É")],
            [KeyboardButton(text="‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–ø—Ä–æ—Å–æ–≤")],
            [KeyboardButton(text="üîï –†–µ–∂–∏–º —Ç–∏—à–∏–Ω—ã")],
            [KeyboardButton(text="üì± –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    settings = get_user_settings(message.from_user.id)
    if settings:
        interval_text = f"{settings.survey_interval} –º–∏–Ω"
        quiet_text = "–≤—ã–∫–ª—é—á–µ–Ω"
        if settings.quiet_hours_start is not None and settings.quiet_hours_end is not None:
            quiet_text = f"{settings.quiet_hours_start:02d}:00 - {settings.quiet_hours_end:02d}:00"
        
        settings_info = (
            f"‚öôÔ∏è –ù–ê–°–¢–†–û–ô–ö–ò\n\n"
            f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–ø—Ä–æ—Å–æ–≤: {interval_text}\n"
            f"üîï –†–µ–∂–∏–º —Ç–∏—à–∏–Ω—ã: {quiet_text}\n"
            f"üìÖ –í—ã—Ö–æ–¥–Ω—ã–µ: {settings.weekend_mode}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:"
        )
    else:
        settings_info = "‚öôÔ∏è –ù–ê–°–¢–†–û–ô–ö–ò\n\n–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:"
    
    await message.answer(settings_info, reply_markup=settings_keyboard)

@dp.message(lambda msg: msg.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def help_reply_handler(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞."""
    help_text = (
        "‚ÑπÔ∏è –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:\n\n"
        "1. –ö–∞–∂–¥—ã–π —á–∞—Å —è —Å–ø—Ä–∞—à–∏–≤–∞—é –≤–∞—à—É —Ç–µ–∫—É—â—É—é –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.\n"
        "2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.\n"
        "3. –ù–∞–∂–º–∏—Ç–µ üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äì –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
        "/menu ‚Äì –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
    )
    back_keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üì± –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await message.answer(help_text, reply_markup=back_keyboard)

@dp.message(lambda msg: msg.text in ["üî• –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞", "üìà –¢—Ä–µ–Ω–¥—ã –ø–æ –Ω–µ–¥–µ–ª—è–º", "üìä –¢—Ä–µ–Ω–¥—ã –ø–æ –º–µ—Å—è—Ü–∞–º", "‚öñÔ∏è –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–æ–≤"])
async def handle_extended_analytics_reply(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —á–µ—Ä–µ–∑ reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É."""
    # –ö–∞—Ä—Ç–∞ —Ç–∏–ø–æ–≤ –≥—Ä–∞—Ñ–∏–∫–æ–≤
    chart_mapping = {
        "üî• –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞": ("heatmap", "—Ç–µ–ø–ª–æ–≤—É—é –∫–∞—Ä—Ç—É"),
        "üìà –¢—Ä–µ–Ω–¥—ã –ø–æ –Ω–µ–¥–µ–ª—è–º": ("weekly_trends", "—Ç—Ä–µ–Ω–¥—ã –ø–æ –Ω–µ–¥–µ–ª—è–º"), 
        "üìä –¢—Ä–µ–Ω–¥—ã –ø–æ –º–µ—Å—è—Ü–∞–º": ("monthly_trends", "—Ç—Ä–µ–Ω–¥—ã –ø–æ –º–µ—Å—è—Ü–∞–º"),
        "‚öñÔ∏è –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–æ–≤": ("period_comparison", "—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–æ–≤")
    }
    
    chart_type, chart_name = chart_mapping[message.text]
    await message.answer(f"üìä –ì–µ–Ω–µ—Ä–∏—Ä—É—é {chart_name}...")
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        conn = sqlite3.connect(DB_PATH)
        query = """
            SELECT timestamp, event_type, details
            FROM logs 
            WHERE user_id = ? AND event_type IN ('answer_emotional') 
            ORDER BY timestamp
        """
        df = pd.read_sql_query(query, conn, params=(message.from_user.id,))
        conn.close()
        
        if df.empty:
            await message.answer(
                f"üìä –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞.\n"
                f"–°–æ–±–µ—Ä–∏ –±–æ–ª—å—à–µ –∑–∞–ø–∏—Å–µ–π!"
            )
            return
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ
        df['timestamp'] = pd.to_datetime(df['timestamp'])
        mood_map = {
            "–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ–µ": 10, "–û—á–µ–Ω—å —Ö–æ—Ä–æ—à–µ–µ": 9, "–•–æ—Ä–æ—à–µ–µ": 8,
            "–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ": 7, "–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ": 6, "–°—Ä–µ–¥–Ω–µ–µ": 5,
            "–ü–ª–æ—Ö–æ–µ": 4, "–û—á–µ–Ω—å –ø–ª–æ—Ö–æ–µ": 3, "–£–∂–∞—Å–Ω–æ–µ": 2, "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –ø–ª–æ—Ö–æ–µ": 1
        }
        df['score'] = df['details'].map(mood_map)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ –≥—Ä–∞—Ñ–∏–∫–∞
        if should_generate_new_charts(df, chart_type):
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫
            success = generate_and_send_new_charts(
                BOT_TOKEN, message.from_user.id, df, chart_type, "emotion", logger
            )
            
            if success:
                await message.answer(f"‚úÖ {chart_name.capitalize()} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
            else:
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        else:
            min_data_requirements = {
                "heatmap": "10 –∑–∞–ø–∏—Å–µ–π",
                "weekly_trends": "14 –∑–∞–ø–∏—Å–µ–π (2 –Ω–µ–¥–µ–ª–∏)",
                "monthly_trends": "14 –∑–∞–ø–∏—Å–µ–π (2 –Ω–µ–¥–µ–ª–∏)",
                "period_comparison": "20 –∑–∞–ø–∏—Å–µ–π"
            }
            
            requirement = min_data_requirements.get(chart_type, "–±–æ–ª—å—à–µ –∑–∞–ø–∏—Å–µ–π")
            await message.answer(
                f"üìä –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞.\n\n"
                f"–î–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ '{chart_name}' –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –º–∏–Ω–∏–º—É–º {requirement}.\n"
                f"–£ –≤–∞—Å: {len(df)} –∑–∞–ø–∏—Å–µ–π.\n\n"
                f"–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∑–∞–ø–æ–ª–Ω—è—Ç—å –¥–Ω–µ–≤–Ω–∏–∫!"
            )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        await main_menu_handler(message)
        
    except Exception as e:
        logger.error(f"Error generating extended chart {chart_type} for user {message.from_user.id}: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message(lambda msg: msg.text == "üîô –ù–∞–∑–∞–¥ –∫ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ")
async def back_to_analytics_menu(message: Message):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –º–µ–Ω—é –∞–Ω–∞–ª–∏—Ç–∏–∫–∏."""
    await request_analytics(message)

# ======================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ù–ê–°–¢–†–û–ï–ö ========================

def cancel_user_survey_jobs(user_id: int):
    """–û—Ç–º–µ–Ω—è–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ jobs –æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        jobs = scheduler.get_jobs()
        cancelled_count = 0
        for job in jobs:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ job —Ñ—É–Ω–∫—Ü–∏–∏ send_activity_request —Å –Ω—É–∂–Ω—ã–º user_id
            if (job.func == send_activity_request and 
                len(job.args) > 0 and 
                job.args[0] == user_id):
                scheduler.remove_job(job.id)
                cancelled_count += 1
                logger.info(f"Cancelled survey job {job.id} for user {user_id}")
        
        if cancelled_count > 0:
            logger.info(f"Cancelled {cancelled_count} survey jobs for user {user_id}")
            
    except Exception as e:
        logger.error(f"Error cancelling survey jobs for user {user_id}: {e}")

@dp.message(lambda msg: msg.text == "üåç –ò–∑–º–µ–Ω–∏—Ç—å —Ç–∞–π–º–∑–æ–Ω—É")
async def timezone_settings_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–∞–π–º–∑–æ–Ω—ã."""
    # –û—Ç–º–µ—á–∞–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—à–µ–ª –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    _from_settings.add(message.from_user.id)
    await message.answer(
        "üåç –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Ç–∞–π–º–∑–æ–Ω—É:",
        reply_markup=get_timezone_keyboard()
    )

@dp.message(lambda msg: msg.text == "‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–ø—Ä–æ—Å–æ–≤")
async def interval_settings_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –æ–ø—Ä–æ—Å–æ–≤."""
    interval_keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ö° 30 –º–∏–Ω—É—Ç"), KeyboardButton(text="‚è∞ 1 —á–∞—Å")],
            [KeyboardButton(text="üïê 2 —á–∞—Å–∞")],
            [KeyboardButton(text="üîô –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    
    current_settings = get_user_settings(message.from_user.id)
    current_interval = "1 —á–∞—Å"
    if current_settings:
        if current_settings.survey_interval == 30:
            current_interval = "30 –º–∏–Ω—É—Ç" 
        elif current_settings.survey_interval == 120:
            current_interval = "2 —á–∞—Å–∞"
    
    await message.answer(
        f"‚è∞ –ò–ù–¢–ï–†–í–ê–õ –û–ü–†–û–°–û–í\n\n"
        f"–¢–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: {current_interval}\n\n"
        f"–ö–∞–∫ —á–∞—Å—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –æ–ø—Ä–æ—Å—ã?",
        reply_markup=interval_keyboard
    )

@dp.message(lambda msg: msg.text in ["‚ö° 30 –º–∏–Ω—É—Ç", "‚è∞ 1 —á–∞—Å", "üïê 2 —á–∞—Å–∞"])
async def handle_interval_selection(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –æ–ø—Ä–æ—Å–æ–≤."""
    interval_map = {
        "‚ö° 30 –º–∏–Ω—É—Ç": 30,
        "‚è∞ 1 —á–∞—Å": 60,
        "üïê 2 —á–∞—Å–∞": 120
    }
    
    new_interval = interval_map[message.text]
    success = update_user_settings(message.from_user.id, survey_interval=new_interval)
    
    if success:
        # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ jobs –æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cancel_user_survey_jobs(message.from_user.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π job
        last_ev = get_last_event(message.from_user.id)
        if last_ev and should_send_survey(message.from_user.id, last_ev.timestamp.replace(tzinfo=timezone.utc)):
            # –ï—Å–ª–∏ –ø–æ—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ–ø—Ä–æ—Å - —Å–æ–∑–¥–∞–µ–º job –Ω–∞ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è (—á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É)
            scheduler.add_job(
                send_activity_request,
                'date',
                run_date=datetime.now(timezone.utc) + timedelta(minutes=1),
                args=[message.from_user.id]
            )
            logger.info(f"Scheduled immediate survey for user {message.from_user.id} after interval change")
        
        await message.answer(
            f"‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–ø—Ä–æ—Å–æ–≤ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {message.text}\n"
            f"üîÑ –°—Ç–∞—Ä—ã–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–ø—Ä–æ—Å—ã –æ—Ç–º–µ–Ω–µ–Ω—ã",
            reply_markup=ReplyKeyboardRemove()
        )
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
    await settings_handler(message)

@dp.message(lambda msg: msg.text == "üîï –†–µ–∂–∏–º —Ç–∏—à–∏–Ω—ã")
async def quiet_mode_settings_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∂–∏–º–∞ —Ç–∏—à–∏–Ω—ã."""
    quiet_keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üåô 23:00 - 07:00"), KeyboardButton(text="üåõ 22:00 - 08:00")],
            [KeyboardButton(text="üè† –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Ä—É—á–Ω—É—é")],
            [KeyboardButton(text="üîä –û—Ç–∫–ª—é—á–∏—Ç—å —Ç–∏—à–∏–Ω—É")],
            [KeyboardButton(text="üîô –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    
    current_settings = get_user_settings(message.from_user.id)
    quiet_status = "–≤—ã–∫–ª—é—á–µ–Ω"
    if current_settings and current_settings.quiet_hours_start is not None:
        quiet_status = f"{current_settings.quiet_hours_start:02d}:00 - {current_settings.quiet_hours_end:02d}:00"
    
    await message.answer(
        f"üîï –†–ï–ñ–ò–ú –¢–ò–®–ò–ù–´\n\n"
        f"–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: {quiet_status}\n\n"
        f"–í –ø–µ—Ä–∏–æ–¥ —Ç–∏—à–∏–Ω—ã –æ–ø—Ä–æ—Å—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è.\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç:",
        reply_markup=quiet_keyboard
    )

@dp.message(lambda msg: msg.text in ["üåô 23:00 - 07:00", "üåõ 22:00 - 08:00", "üîä –û—Ç–∫–ª—é—á–∏—Ç—å —Ç–∏—à–∏–Ω—É"])
async def handle_quiet_mode_selection(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ —Ç–∏—à–∏–Ω—ã."""
    if message.text == "üåô 23:00 - 07:00":
        success = update_user_settings(message.from_user.id, quiet_hours_start=23, quiet_hours_end=7)
        result_text = "—Ä–µ–∂–∏–º —Ç–∏—à–∏–Ω—ã: 23:00 - 07:00"
    elif message.text == "üåõ 22:00 - 08:00":
        success = update_user_settings(message.from_user.id, quiet_hours_start=22, quiet_hours_end=8)  
        result_text = "—Ä–µ–∂–∏–º —Ç–∏—à–∏–Ω—ã: 22:00 - 08:00"
    else:  # –û—Ç–∫–ª—é—á–∏—Ç—å —Ç–∏—à–∏–Ω—É
        success = update_user_settings(message.from_user.id, quiet_hours_start=None, quiet_hours_end=None)
        result_text = "—Ä–µ–∂–∏–º —Ç–∏—à–∏–Ω—ã –æ—Ç–∫–ª—é—á–µ–Ω"
    
    if success:
        await message.answer(
            f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {result_text}",
            reply_markup=ReplyKeyboardRemove()
        )
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
    await settings_handler(message)

@dp.message(lambda msg: msg.text == "üîô –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º")
async def back_to_settings(message: Message):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
    await settings_handler(message)

# ----------------------- –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è -----------------------

async def check_pending_requests():
    """
    –ö–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤ –ë–î –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "pending":
    - –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    - –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –≤—Ä–µ–º–µ–Ω–∏ –±–æ–ª—å—à–µ —á–µ–º 2x –∏–Ω—Ç–µ—Ä–≤–∞–ª - –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–π
    """
    try:
        now = datetime.now(timezone.utc)
        pending_requests = get_pending_requests()
        
        for req in pending_requests:
            # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            settings = get_user_settings(req.user_id)
            if not settings:
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
            
            time_diff = now - req.request_time
            interval_minutes = settings.survey_interval
            
            # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ interval_minutes, –Ω–æ –Ω–µ –±–æ–ª–µ–µ 2 –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
            reminder_threshold = timedelta(minutes=interval_minutes)
            timeout_threshold = timedelta(minutes=interval_minutes * 2)
            
            if reminder_threshold < time_diff <= timeout_threshold:
                try:
                    await bot.send_message(
                        req.user_id,
                        f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –∑–∞–ø—Ä–æ—Å –æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏.\n"
                        f"(–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–ø—Ä–æ—Å–æ–≤: {interval_minutes} –º–∏–Ω)"
                    )
                except Exception as e:
                    logger.error(f"Failed to send reminder to user {req.user_id}: {e}")
                    
            elif time_diff > timeout_threshold:
                success = mark_request_as_unanswered(req.user_id, req.request_time)
                if success:
                    try:
                        await bot.send_message(
                            req.user_id,
                            f"‚è±Ô∏è –ó–∞–ø—Ä–æ—Å –æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏ –ø—Ä–æ–ø—É—â–µ–Ω (–ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏: {interval_minutes * 2} –º–∏–Ω)."
                        )
                    except Exception as e:
                        logger.error(f"Failed to send timeout message to user {req.user_id}: {e}")
                else:
                    logger.error(f"Failed to mark request as unanswered for user {req.user_id}")
                    
    except Exception as e:
        logger.error(f"Error in check_pending_requests: {e}")

# –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
scheduler.add_job(check_pending_requests, 'interval', minutes=10)

# ----------------------- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ -----------------------

async def main():
    try:
        scheduler.start()  # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        logger.info("Bot started successfully")
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"Bot startup failed: {e}")
        raise

# ----------------------- HELPERS -----------------------

# –§—É–Ω–∫—Ü–∏—è build_timezone_keyboard —É–¥–∞–ª–µ–Ω–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è get_timezone_keyboard()

if __name__ == "__main__":
    asyncio.run(main()) 
#!/usr/bin/env python3
"""
–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ Render —á–µ—Ä–µ–∑ SSH.

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç:
1. –ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É Render —á–µ—Ä–µ–∑ SSH
2. –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –±—ç–∫–∞–ø–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
3. –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
4. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç

Usage:
    python scripts/deploy_restore.py [backup_date]
    
Example:
    python scripts/deploy_restore.py 20250627_201421
"""

import os
import sys
import paramiko
import tempfile
from pathlib import Path
from typing import Final

# SSH –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Render
SSH_HOST: Final[str] = "ssh.oregon.render.com"
SSH_USER: Final[str] = "srv-cssvk3ogph6c7399j0gg"
SSH_KEY_PATH: Final[str] = str(Path.home() / ".ssh/id_rsa")

def upload_backup_and_restore(backup_date: str = "20250627_201421"):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –±—ç–∫–∞–ø –Ω–∞ —Å–µ—Ä–≤–µ—Ä –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ."""
    
    # –õ–æ–∫–∞–ª—å–Ω—ã–µ –ø—É—Ç–∏
    backup_dir = Path(__file__).parent.parent / "backups" / backup_date
    csv_path = backup_dir / "logs.csv"
    
    if not csv_path.exists():
        print(f"‚ùå –§–∞–π–ª –±—ç–∫–∞–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {csv_path}")
        return False
    
    print(f"üì¶ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±—ç–∫–∞–ø–∞: {backup_date}")
    print(f"üìÅ –õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª: {csv_path}")
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É
        print("üîå –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É Render...")
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh.connect(hostname=SSH_HOST, username=SSH_USER, key_filename=SSH_KEY_PATH)
        
        # –°–æ–∑–¥–∞–µ–º SFTP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        sftp = ssh.open_sftp()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –±—ç–∫–∞–ø–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        remote_csv_path = f"/tmp/restore_backup_{backup_date}.csv"
        print(f"üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º –±—ç–∫–∞–ø –Ω–∞ —Å–µ—Ä–≤–µ—Ä: {remote_csv_path}")
        sftp.put(str(csv_path), remote_csv_path)
        
        # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        restore_script = f"""
import csv
import sys
import os
from datetime import datetime
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append('/opt/render/project/src')

from database_safe import save_user, save_log, Base, engine, get_db_session, User, Log

def restore_data():
    print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
    Base.metadata.create_all(engine)
    
    restored_logs = 0
    created_users = set()
    
    with open("{remote_csv_path}", 'r', encoding='utf-8') as f:
        reader = csv.DictReader(f)
        
        for row in reader:
            user_id = int(row['user_id'])
            event_type = row['event_type']
            timestamp_str = row['timestamp']
            details = row['details'] if row['details'] else None
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_id not in created_users:
                save_user(user_id, timezone=None)
                created_users.add(user_id)
            
            # –ü–∞—Ä—Å–∏–º timestamp
            try:
                timestamp = datetime.fromisoformat(timestamp_str.replace('Z', '+00:00'))
            except ValueError:
                timestamp = datetime.fromisoformat(timestamp_str)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥
            success = save_log(user_id, event_type, timestamp, details)
            if success:
                restored_logs += 1
    
    print(f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {{restored_logs}} –∑–∞–ø–∏—Å–µ–π, {{len(created_users)}} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    with get_db_session() as session:
        total_logs = session.query(Log).count()
        total_users = session.query(User).count()
        print(f"üìä –ò—Ç–æ–≥–æ –≤ –±–∞–∑–µ: {{total_users}} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, {{total_logs}} –∑–∞–ø–∏—Å–µ–π")

if __name__ == "__main__":
    restore_data()
"""
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫—Ä–∏–ø—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        remote_script_path = "/tmp/restore_script.py"
        print("üìù –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ...")
        with sftp.open(remote_script_path, 'w') as f:
            f.write(restore_script)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
        print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...")
        stdin, stdout, stderr = ssh.exec_command(f"cd /opt/render/project/src && python {remote_script_path}")
        
        # –ß–∏—Ç–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        output = stdout.read().decode('utf-8')
        error = stderr.read().decode('utf-8')
        
        if output:
            print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:")
            print(output)
        
        if error:
            print("‚ùå –û—à–∏–±–∫–∏:")
            print(error)
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        print("üßπ –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã...")
        ssh.exec_command(f"rm {remote_csv_path} {remote_script_path}")
        
        sftp.close()
        ssh.close()
        
        print("‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    backup_date = sys.argv[1] if len(sys.argv) > 1 else "20250627_201421"
    
    print("üîÑ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –î–ê–ù–ù–´–• –ù–ê RENDER")
    print("=" * 50)
    
    success = upload_backup_and_restore(backup_date)
    
    if success:
        print("\nüéâ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ!")
        print("üì± –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É –≤ –±–æ—Ç–µ")
    else:
        print("\n‚ùå –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å")

if __name__ == "__main__":
    main() 
"""Restore MoodTrackerBot data from backup.

–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –±—ç–∫–∞–ø–∞ –≤ —Ç–µ–∫—É—â—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
–°–æ–≤–º–µ—Å—Ç–∏–º —Å –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –±–∞–∑—ã (—Ç–∞–±–ª–∏—Ü—ã User, UserSettings, Log, MoodRequest).

Usage:
    python scripts/restore_data.py [backup_date]
    
Example:
    python scripts/restore_data.py 20250627_201421
"""

import os
import sys
import csv
import sqlite3
from datetime import datetime
from pathlib import Path
from typing import Optional

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –ø–∞–ø–∫—É –≤ path –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.append(str(Path(__file__).parent.parent))

from database_safe import (
    get_db_session, save_user, save_log, 
    User, UserSettings, Log, MoodRequest, 
    Base, engine
)

def restore_from_backup(backup_date: str = "20250627_201421"):
    """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –±—ç–∫–∞–ø–∞."""
    
    # –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –±—ç–∫–∞–ø–∞
    backup_dir = Path(__file__).parent.parent / "backups" / backup_date
    csv_path = backup_dir / "logs.csv"
    
    if not csv_path.exists():
        print(f"‚ùå –§–∞–π–ª –±—ç–∫–∞–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {csv_path}")
        return False
    
    print(f"üì¶ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±—ç–∫–∞–ø–∞: {backup_date}")
    print(f"üìÅ –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É: {csv_path}")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    print("üóÑÔ∏è  –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã...")
    Base.metadata.create_all(engine)
    
    # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ CSV
    print("üìñ –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ CSV...")
    restored_logs = 0
    created_users = set()
    
    try:
        with open(csv_path, 'r', encoding='utf-8') as f:
            reader = csv.DictReader(f)
            
            for row in reader:
                user_id = int(row['user_id'])
                event_type = row['event_type']
                timestamp_str = row['timestamp']
                details = row['details'] if row['details'] else None
                
                # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
                if user_id not in created_users:
                    success = save_user(user_id, timezone=None)  # –¢–∞–π–º–∑–æ–Ω–∞ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—Ö–æ–¥–µ
                    if success:
                        created_users.add(user_id)
                        print(f"üë§ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}")
                
                # –ü–∞—Ä—Å–∏–º timestamp
                try:
                    timestamp = datetime.fromisoformat(timestamp_str.replace('Z', '+00:00'))
                except ValueError:
                    # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –±–µ–∑ timezone
                    timestamp = datetime.fromisoformat(timestamp_str)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥
                success = save_log(user_id, event_type, timestamp, details)
                if success:
                    restored_logs += 1
                    if restored_logs % 500 == 0:
                        print(f"üìù –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {restored_logs} –∑–∞–ø–∏—Å–µ–π...")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏: {row}")
        
        print(f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        print(f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(created_users)}")
        print(f"üìù –ó–∞–ø–∏—Å–µ–π –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {restored_logs}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")
        return False

def check_current_data():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã...")
    
    try:
        with get_db_session() as session:
            users_count = session.query(User).count()
            logs_count = session.query(Log).count()
            settings_count = session.query(UserSettings).count()
            
            print(f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ: {users_count}")
            print(f"üìù –ó–∞–ø–∏—Å–µ–π –≤ –ª–æ–≥–∞—Ö: {logs_count}")
            print(f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {settings_count}")
            
            return logs_count
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–∑—ã: {e}")
        return 0

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è."""
    backup_date = sys.argv[1] if len(sys.argv) > 1 else "20250627_201421"
    
    print("üîÑ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –î–ê–ù–ù–´–• MOODTRACKERBOT")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    current_logs = check_current_data()
    
    if current_logs > 0:
        response = input(f"\n‚ö†Ô∏è  –í –±–∞–∑–µ —É–∂–µ –µ—Å—Ç—å {current_logs} –∑–∞–ø–∏—Å–µ–π. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ? (y/N): ")
        if response.lower() != 'y':
            print("‚ùå –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
            return
    
    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    success = restore_from_backup(backup_date)
    
    if success:
        print("\nüéâ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
        check_current_data()
    else:
        print("\n‚ùå –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å")

if __name__ == "__main__":
    main() 